[tool:pytest]
# Integration Test Configuration for Bug Hunting Framework

# Test discovery
testpaths = .
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto

# Markers
markers =
    integration: marks tests as integration tests
    slow: marks tests as slow running
    docker: marks tests that require Docker
    api: marks tests as API integration tests
    workflow: marks tests as workflow integration tests
    performance: marks tests as performance tests
    security: marks tests as security tests
    complete_workflow: marks tests as complete workflow tests
    docker_compose: marks tests as Docker Compose tests

# Test execution
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
    --maxfail=5
    --timeout=300
    --timeout-method=thread

# Coverage settings
addopts = 
    --cov=backend
    --cov=stages
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# Test data
testpaths = 
    test_complete_workflow_integration.py
    test_docker_compose_integration.py

# Environment variables
env =
    TESTING = true
    DEBUG = true
    DATABASE_URL = postgresql://postgres:postgres@localhost:5432/bug_hunting_framework_test
    SECRET_KEY = test-secret-key-for-integration-tests
    JWT_SECRET = test-jwt-secret-for-integration-tests

# Timeout settings
timeout = 300
timeout_method = thread

# Parallel execution (if supported)
# addopts = -n auto

# HTML report
addopts = --html=integration_test_report.html --self-contained-html

# JSON report
addopts = --json-report --json-report-file=integration_test_results.json 