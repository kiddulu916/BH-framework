# Bug Hunting Framework - Environment Configuration Example

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DB_NAME=bug_hunting_framework
DB_USER=postgres
DB_PASSWORD=postgres
DB_HOST=db
DB_PORT=5432
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# =============================================================================
# DJANGO CONFIGURATION
# =============================================================================
DJANGO_SETTINGS_MODULE=api.settings
DEBUG=False
SECRET_KEY=your-secret-key-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend,frontend,db,jwt_rotator,vuln_scan,vuln_test,kill_chain,reporting,passive_recon,active_recon,nginx,prometheus,grafana,elasticsearch,logstash,kibana,redis
CORS_ALLOWED_ORIGINS=http://0.0.0.0:80,http://127.0.0.1:80,http://localhost:80,http://0.0.0.0:443,http://127.0.0.1:443,http://localhost:443,http://0.0.0.0:3000,http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://0.0.0.0:8000,http://localhost:8000,http://127.0.0.1:8000,http://backend:8000,http://0.0.0.0:3333,http://localhost:3333,http://127.0.0.1:3333,http://0.0.0.0:8001,http://localhost:8001,http://127.0.0.1:8001,http://passive_recon:8001,http://0.0.0.0:8002,http://localhost:8002,http://127.0.0.1:8002,http://active_recon:8002,http://0.0.0.0:8003,http://localhost:8003,http://127.0.0.1:8003,http://vuln_scan:8003,http://0.0.0.0:8004,http://localhost:8004,http://127.0.0.1:8004,http://vuln_testing:8004,http://0.0.0.0:8005,http://localhost:8005,http://127.0.0.1:8005,http://kill_chain:8005,http://0.0.0.0:8006,http://localhost:8006,http://127.0.0.1:8006,http://reporting:8006,http://0.0.0.0:5432,http://localhost:5432,http://127.0.0.1:5432,http://db:5432,http://0.0.0.0:9090,http://localhost:9090,http://127.0.0.1:9090,http://0.0.0.0:9200,http://localhost:9200,http://127.0.0.1:9200,http://0.0.0.0:5601,http://localhost:5601,http://127.0.0.1:5601,http://0.0.0.0:9600,http://localhost:9600,http://127.0.0.1:9600,http://0.0.0.0:6379,http://localhost:6379,http://127.0.0.1:6379,http://0.0.0.0:3001,http://localhost:3001,http://127.0.0.1:3001
SENTRY_DSN=https://1234567890@sentry.io/1234567890

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
REDIS_PASSWORD=your_secure_redis_password_here
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
GRAFANA_ADMIN_PASSWORD=your_secure_grafana_admin_password_here
PROMETHEUS_RETENTION_DAYS=30
ELASTICSEARCH_HEAP_SIZE=512m

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE_MAX_SIZE=100MB
LOG_FILE_BACKUP_COUNT=10

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# SSL/TLS Configuration
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem
SSL_DH_PARAM_PATH=/etc/nginx/ssl/dhparam.pem

# Security Headers
SECURE_SSL_REDIRECT=True
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=True
SECURE_HSTS_PRELOAD=True
SECURE_CONTENT_TYPE_NOSNIFF=True
SECURE_BROWSER_XSS_FILTER=True
SECURE_FRAME_DENY=True
X_FRAME_OPTIONS=DENY

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================
BACKUP_RETENTION_DAYS=30
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_COMPRESSION=true
BACKUP_ENCRYPTION=true

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================
# Database Connection Pool
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Cache Configuration
CACHE_TIMEOUT=300
CACHE_MAX_ENTRIES=1000
CACHE_CULL_FREQUENCY=3

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================
# Sentry for Error Tracking
SENTRY_DSN=your_sentry_dsn_here

# =============================================================================
# EXTERNAL API KEYS CONFIGURATION
# =============================================================================
NVD_API_KEY=<YOUR_NVD_API_KEY>
GITHUB_TOKEN=<YOUR_GITHUB_TOKEN>
HACKERONE_API_KEY=<YOUR_HACKERONE_API_KEY>

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================
BACKEND_URL=http://localhost:8000
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:8000/api
NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
INTERNAL_BACKEND_URL=http://backend:8000
INTERNAL_API_URL=http://backend:8000/api
NODE_ENV=production
PORT=3000
HOSTNAME=frontend
KEEP_ALIVE_TIMEOUT=60000
HOST=0.0.0.0

# =============================================================================
# STAGE CONTAINER CONFIGURATION
# =============================================================================
# Backend API configuration for stage containers
BACKEND_API_URL=http://backend:8000/api
BACKEND_JWT_TOKEN=${JWT_SECRET_KEY}

# Stage container timeouts and limits
STAGE_TIMEOUT_SECONDS=3600
STAGE_MAX_MEMORY_MB=4048
STAGE_MAX_CPU_PERCENT=80
STAGE_MEMORY_LIMIT=4G
STAGE_CPU_LIMIT=2.0
STAGE_TIMEOUT_SECONDS=3600

# Stage-specific configurations
TARGET=
PASSIVE_RECON_TIMEOUT=1800
ACTIVE_RECON_TIMEOUT=2400
VULN_SCAN_TIMEOUT=3600
VULN_TEST_TIMEOUT=3600
KILL_CHAIN_TIMEOUT=1800
REPORT_GENERATION_TIMEOUT=900

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
# Network Ports
NGINX_PORT=80
NGINX_SSL_PORT=443
BACKEND_PORT=8000
FRONTEND_PORT=3000
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001
ELASTICSEARCH_PORT=9200
KIBANA_PORT=5601
LOGSTASH_PORT=9600
REDIS_PORT=6379
PASSIVE_RECON_PORT=8001
ACTIVE_RECON_PORT=8002
VULN_SCAN_PORT=8003
VULN_TEST_PORT=8004
KILL_CHAIN_PORT=8005
REPORTING_PORT=8006

# =============================================================================
# DEVELOPMENT OVERRIDES (for testing)
# =============================================================================
# Set to True only in development/testing environments
DEVELOPMENT_MODE=False
SKIP_SSL_VERIFICATION=False
ALLOW_INSECURE_CONNECTIONS=False

# =============================================================================
# MONITORING ENDPOINTS
# =============================================================================
HEALTH_CHECK_ENDPOINT=/health/
METRICS_ENDPOINT=/metrics/
READINESS_ENDPOINT=/ready/
LIVENESS_ENDPOINT=/live/

# =============================================================================
# AUDIT LOGGING
# =============================================================================
AUDIT_LOG_ENABLED=True
AUDIT_LOG_RETENTION_DAYS=365
AUDIT_LOG_LEVEL=INFO

# =============================================================================
# FEATURE FLAGS
# =============================================================================
ENABLE_AI_ML_FEATURES=True
ENABLE_ADVANCED_REPORTING=True
ENABLE_REAL_TIME_MONITORING=True
ENABLE_USER_ANALYTICS=True
ENABLE_AUTOMATED_BACKUPS=True

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================
COMPOSE_PROJECT_NAME=bug-hunting

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
LOG_LEVEL=INFO
LOG_FORMAT=json

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
ENABLE_METRICS=True
METRICS_PORT=9090

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================
# Enable hot reloading
WATCHDOG_TIMEOUT=2

# =============================================================================
# JWT SECRET
# =============================================================================
JWT_SECRET=<YOUR_JWT_SECRET> # Encode any string with base64 or sha256
# =============================================================================
# DOCUMENTATION
# =============================================================================
# This file should be copied to .env.prod and all placeholder values
# should be replaced with actual secure values before deployment.
#
# Security Notes:
# - Use strong, unique passwords for all services
# - Generate secure random keys for Django and JWT secrets
# - Use HTTPS in production with valid SSL certificates
# - Regularly rotate secrets and passwords
# - Monitor logs for security events
# - Keep all dependencies updated
# - Implement proper access controls
# - Use secrets management for sensitive data
#
# Backup Notes:
# - Test backup and restore procedures regularly
# - Store backups in secure, off-site locations
# - Encrypt backup data
# - Monitor backup success/failure
#
# Monitoring Notes:
# - Set up comprehensive alerting
# - Monitor system resources and performance
# - Track application metrics and business KPIs
# - Implement log aggregation and analysis
# - Set up incident response procedures 