---
description: "Core project configuration and settings that define the project's technical stack, patterns, and conventions"
globs: "**/*"
alwaysApply: true
---
---
description: Bug-hunting-framework project configuration
globs: "**/*.*"
alwaysApply: true
---
# project-config.md
Last-Updated: 2024-12-19

## Project Goal
Build a scalable, secure, robust, and maintainable, fully automated full-stack application for bug hunting that supports ethical security testing, automated tool utilization, and comprehensive reporting capabilities.

## Tech Stack

### **Backend**
- **Framework**: Django + Django Ninja
  * REST API implementation with async support
  * Admin interface
  * Built-in security features
  * OpenAPI/Swagger documentation
  * Request/response validation with Pydantic
  * Standardized APIResponse pattern
  * Global exception handling

- **Database**: PostgreSQL with SQLAlchemy ORM
  * ACID compliance
  * Async operations with asyncpg
  * Advanced querying with SQLAlchemy 2.0
  * JSONB support
  * Full-text search
  * Connection pooling
  * Migration support with Alembic

- **Authentication**: JWT with HTTP-only cookies
  * Secure token storage in HTTP-only cookies
  * Access tokens with 30-minute default expiration
  * Refresh tokens with 7-day default expiration
  * Modern timezone-aware datetime handling
  * Token rotation and session management
  * Simple user management
  * Automatic user creation

- **Validation**: Pydantic
  * Request/response validation
  * Data type checking
  * Custom validators
  * Schema documentation
  * Business rules validation
  * Type hints

- **Testing**: Pytest + HTTPX with ASGITransport
  * Unit testing with async support
  * Integration testing with in-process ASGI app
  * API testing with real database integration
  * Mocking capabilities
  * Coverage reporting
  * Performance testing

- **Documentation**: Swagger/OpenAPI 3.0
  * API documentation
  * Interactive testing
  * Schema validation
  * Code generation
  * Version tracking
  * Security documentation

### **Frontend**
- **API Gateway**
  * Django Ninja for REST endpoints
  * WebSocket for real-time communication
  * GraphQL for complex queries (future)
  * Rate limiting middleware
  * Authentication middleware
  * CORS middleware
  * Request validation
  * API versioning

- **Real-time Communication**
  * WebSocket server
  * Event-driven architecture
  * Message queue system
  * State management
  * Real-time monitoring
  * Error handling
  * Connection pooling
  * Heartbeat monitoring

- **UI/UX Framework**
  * React for UI components
  * Redux for state management
  * Material-UI for components
  * Tailwind CSS for styling
  * WebSocket client
  * Real-time updates
  * Responsive design
  * Progressive loading
  * Error boundaries

### **Development Tools**
- **Version Control**: Git
  * Branch strategy
  * Commit conventions
  * PR process
  * Review process
  * Release process
  * Version tagging

- **Code Quality**: Black, Flake8, MyPy
  * Code formatting
  * Linting
  * Type checking
  * Style enforcement
  * Documentation checks
  * Security scanning

- **Testing**: Pytest, Coverage, HTTPX
  * Unit testing
  * Integration testing with ASGITransport
  * API testing
  * Performance testing
  * Security testing
  * Documentation testing

- **Documentation**: Sphinx
  * API documentation
  * Code documentation
  * Architecture documentation
  * Security documentation
  * Deployment documentation
  * User guides

- **Container Management**: Docker + Docker Compose
  * Development environment
  * Production environment
  * Security hardening
  * Network isolation
  * Resource limits
  * Health checks

- **Security Scanning**: Bandit, Safety
  * Vulnerability scanning
  * Dependency checking
  * Code analysis
  * Security testing
  * Compliance checking
  * Audit logging

- **Performance Testing**: Locust
  * Load testing
  * Stress testing
  * Performance monitoring
  * Resource usage
  * Response times
  * Scalability testing

- **API Testing**: Postman/Insomnia
  * API testing
  * Integration testing
  * Performance testing
  * Security testing
  * Documentation testing
  * Mock services

- **Database Management**: pgAdmin
  * Database administration
  * Query optimization
  * Backup management
  * Security management
  * Performance monitoring
  * Schema management

- **Monitoring**: Prometheus/Grafana
  * System monitoring
  * Performance monitoring
  * Security monitoring
  * Error tracking
  * Resource usage
  * Alert management

## API Architecture
- **Pattern**: Clean Architecture with dependency injection
  * Clear separation of concerns
  * Domain-driven design
  * SOLID principles
  * Interface-based design

- **Structure**: 
  * Api  (API endpoints with Django Ninja)
  * Tasks  (Business logic)
  * Repositories (Data access with SQLAlchemy)
  * Domain models (Core entities)
  * Infrastructure (External services)

- **Response Pattern**: Standardized APIResponse model
  * Consistent success/error response structure
  * Business logic errors return HTTP 200 with success=False
  * Framework errors use global exception handlers
  * All endpoints return APIResponse model

- **Error Handling**: 
  * Centralized error middleware
  * Global exception handlers for framework errors
  * Standardized error responses
  * Detailed error logging
  * Error correlation IDs
  * Error tracking and monitoring

- **Testing**: HTTPX with ASGITransport
  * In-process API testing
  * Real database integration
  * Async test support
  * Comprehensive test coverage
  * Performance testing

- **Logging**: 
  * Structured logging with correlation IDs
  * Log levels (DEBUG, INFO, WARNING, ERROR)
  * Log rotation and retention
  * Audit logging for security

## Domain Architecture
- **Bug Hunting Domain**
  * Stage Management
  * Workflow Management
  * Data Collection
  * User Management
  * Target Management

- **Bug Reporting Domain**
  * Report Templates
  * Report Generation
  * Platform Formatting
  * Export Management

- **User Management Domain**
  * Authentication
  * Profile Management
  * Platform Reference
  * Session Handling

- **Analytics Domain**
  * Performance Metrics
  * Success Statistics
  * Trend Analysis
  * Reporting Dashboards

## Critical Patterns & Conventions

### **API Design**
- **RESTful endpoints**
  * Resource-based URLs
  * HTTP method semantics
  * Status code usage
  * Error handling
  * Versioning
  * Documentation

- **OpenAPI/Swagger documentation**
  * API specifications
  * Schema definitions
  * Security schemes
  * Response models
  * Example requests
  * Interactive testing

- **JWT authentication**
  * Token management
  * Session handling
  * Role-based access
  * Security headers
  * Token rotation
  * Audit logging

- **Rate limiting**
  * Request quotas
  * IP-based limits
  * User-based limits
  * Endpoint limits
  * Burst handling
  * Monitoring

- **Error handling**
  * Consistent responses
  * Error codes
  * Error messages
  * Validation errors
  * Security errors
  * System errors

- **Input validation**
  * Request validation
  * Data type checking
  * Business rules
  * Custom validators
  * Schema validation
  * Security validation

- **Response formatting**
  * Consistent structure
  * Data transformation
  * Error wrapping
  * Metadata inclusion
  * Pagination
  * Filtering

- **Versioning strategy**
  * URL versioning
  * Header versioning
  * Content negotiation
  * Backward compatibility
  * Deprecation policy
  * Migration guides

### **Frontend Patterns**
- **Real-time Communication**
  * WebSocket connection management
  * Event-driven updates
  * State synchronization
  * Error recovery
  * Reconnection logic
  * Heartbeat monitoring
  * Message queuing
  * Event handling

- **State Management**
  * Centralized state store
  * Real-time state updates
  * State persistence
  * State recovery
  * State validation
  * State monitoring
  * State security
  * State optimization

- **UI/UX Patterns**
  * Component-based architecture
  * Responsive design
  * Progressive loading
  * Error boundaries
  * Loading states
  * Error states
  * Theme management
  * Accessibility

### Error Handling
- Consistent error responses
  * Error structure
  * Error codes
  * Error messages
  * Error context
  * Error tracking
  * Error recovery

- Error logging
  * Log levels
  * Log format
  * Log context
  * Log rotation
  * Log analysis
  * Log security

- Error monitoring
  * Error tracking
  * Error alerts
  * Error analysis
  * Error reporting
  * Error metrics
  * Error trends

- Error recovery
  * Retry logic
  * Fallback handling
  * State recovery
  * Data recovery
  * Service recovery
  * User recovery

- Error reporting
  * Error notifications
  * Error dashboards
  * Error analytics
  * Error trends
  * Error impact
  * Error resolution

- Error documentation
  * Error codes
  * Error messages
  * Error handling
  * Error recovery
  * Error prevention
  * Error best practices

### Logging
- Structured logging
  * Log format
  * Log levels
  * Log context
  * Log metadata
  * Log security
  * Log analysis

- Log levels
  * DEBUG
  * INFO
  * WARNING
  * ERROR
  * CRITICAL
  * AUDIT

- Log rotation
  * Size-based
  * Time-based
  * Backup strategy
  * Retention policy
  * Archive management
  * Security

- Log aggregation
  * Centralized logging
  * Log shipping
  * Log indexing
  * Log search
  * Log analysis
  * Log security

- Log analysis
  * Log parsing
  * Log metrics
  * Log trends
  * Log alerts
  * Log reporting
  * Log security

- Log security
  * Access control
  * Encryption
  * Retention
  * Audit logging
  * Security monitoring
  * Compliance

## Development Standards

### Code Style
- PEP 8 compliance
  * Code formatting
  * Naming conventions
  * Documentation
  * Imports
  * Line length
  * Whitespace

- Type hints
  * Function annotations
  * Variable types
  * Generic types
  * Type checking
  * Documentation
  * IDE support

- Docstrings
  * Function documentation
  * Class documentation
  * Module documentation
  * Parameter documentation
  * Return documentation
  * Example usage

- Code comments
  * Inline comments
  * Block comments
  * TODO comments
  * FIXME comments
  * Documentation
  * Code explanation

- Naming conventions
  * Variables
  * Functions
  * Classes
  * Modules
  * Packages
  * Constants

- Code organization
  * Module structure
  * Package structure
  * Import order
  * Class organization
  * Function organization
  * File organization

### Frontend Standards
- **Component Structure**
  * Functional components
  * Hooks for state
  * Props validation
  * Error boundaries
  * Loading states
  * Error states
  * Component testing
  * Component documentation

- **State Management**
  * Redux store structure
  * Action creators
  * Reducers
  * Selectors
  * Middleware
  * Async actions
  * State persistence
  * State security

- **Real-time Communication**
  * WebSocket hooks
  * Event handlers
  * State updates
  * Error handling
  * Reconnection logic
  * Heartbeat management
  * Message queuing
  * Security

## Testing
### Unit testing
  * Test structure
  * Test coverage
  * Test isolation
  * Test data
  * Test utilities
  * Test documentation

### Integration testing
  * API testing
  * Database testing
  * Service testing
  * Component testing
  * End-to-end testing
  * Performance testing

### End-to-end testing
  * User flows
  * System testing
  * Performance testing
  * Security testing
  * Error handling
  * Recovery testing

### Performance testing
  * Load testing
  * Stress testing
  * Scalability testing
  * Resource usage
  * Response times
  * Bottleneck analysis

### Security testing
  * Vulnerability scanning
  * Penetration testing
  * Authentication testing
  * Authorization testing
  * Data protection
  * Compliance testing

### Documentation testing
  * API documentation
  * Code documentation
  * User documentation
  * Security documentation
  * Deployment documentation
  * Maintenance documentation

## Security Standards

### Authentication
- JWT implementation
  * Token generation
  * Token validation
  * Token refresh
  * Token revocation
  * Token security
  * Token monitoring

- Token management
  * Token storage
  * Token rotation
  * Token expiration
  * Token validation
  * Token security
  * Token audit

- Session handling
  * Session creation
  * Session validation
  * Session expiration
  * Session security
  * Session monitoring
  * Session audit

- Password policies
  * Password strength
  * Password expiration
  * Password reset
  * Password security
  * Password audit
  * Password recovery

- MFA support
  * 2FA implementation
  * MFA options
  * MFA security
  * MFA recovery
  * MFA audit
  * MFA monitoring

- OAuth integration
  * OAuth providers
  * OAuth flow
  * OAuth security
  * OAuth monitoring
  * OAuth audit
  * OAuth recovery

### Frontend Security
- **WebSocket Security**
  * Secure WebSocket (WSS)
  * Connection validation
  * Rate limiting
  * Message validation
  * State validation
  * Security monitoring
  * Connection security
  * Message security

- **Real-time Security**
  * Data encryption
  * Message signing
  * Access control
  * Flow monitoring
  * Event logging
  * Security auditing
  * State security
  * Recovery security

- **State Security**
  * State encryption
  * Change validation
  * Access control
  * Recovery mechanisms
  * Security monitoring
  * Audit logging
  * State persistence
  * State recovery

### Data Protection
- Data encryption
  * At-rest encryption
  * In-transit encryption
  * Key management
  * Encryption algorithms
  * Encryption monitoring
  * Encryption audit

- Data masking
  * Sensitive data
  * Masking rules
  * Masking implementation
  * Masking validation
  * Masking audit
  * Masking monitoring

- Data validation
  * Input validation
  * Output validation
  * Data sanitization
  * Validation rules
  * Validation monitoring
  * Validation audit

- Data sanitization
  * Input sanitization
  * Output sanitization
  * Sanitization rules
  * Sanitization validation
  * Sanitization audit
  * Sanitization monitoring

- Data retention
  * Retention policies
  * Data lifecycle
  * Data archiving
  * Data deletion
  * Retention audit
  * Retention monitoring

- Data backup
  * Backup strategy
  * Backup encryption
  * Backup validation
  * Backup recovery
  * Backup audit
  * Backup monitoring

## Performance Standards

### Backend Performance
- Response time limits
  * API response time
  * Database query time
  * Service response time
  * Cache response time
  * Performance monitoring
  * Performance optimization

- Resource usage limits
  * CPU usage
  * Memory usage
  * Disk usage
  * Network usage
  * Resource monitoring
  * Resource optimization

- Caching strategy
  * Response caching
  * Data caching
  * Cache invalidation
  * Cache warming
  * Cache monitoring
  * Cache optimization

- Database optimization
  * Query optimization
  * Index optimization
  * Connection pooling
  * Cache optimization
  * Performance monitoring
  * Performance tuning

- API optimization
  * Response optimization
  * Request optimization
  * Cache optimization
  * Load balancing
  * Performance monitoring
  * Performance tuning

- Monitoring thresholds
  * Response time
  * Resource usage
  * Error rates
  * Cache hit rates
  * Performance metrics
  * Alert thresholds

### Frontend Performance
- **Real-time Performance**
  * WebSocket optimization
  * Message batching
  * State updates
  * Connection pooling
  * Error recovery
  * Resource management
  * Performance monitoring
  * Performance tuning

- **UI Performance**
  * Component optimization
  * State updates
  * Rendering optimization
  * Resource loading
  * Caching strategy
  * Error handling
  * Performance monitoring
  * Performance tuning

- **State Performance**
  * State updates
  * State persistence
  * State recovery
  * State validation
  * State monitoring
  * Resource management
  * Performance optimization
  * Performance tuning

### Database Performance
- **Query optimization**
  * Query analysis
  * Index usage
  * Query planning
  * Query caching
  * Performance monitoring
  * Performance tuning

- **Index management**
  * Index creation
  * Index maintenance
  * Index optimization
  * Index monitoring
  * Index tuning
  * Index security

- **Connection pooling**
  * Pool configuration
  * Pool management
  * Pool monitoring
  * Pool optimization
  * Pool security
  * Pool recovery

- **Caching strategy**
  * Query cache
  * Result cache
  * Cache invalidation
  * Cache warming
  * Cache monitoring
  * Cache optimization

- **Backup strategy**
  * Backup scheduling
  * Backup validation
  * Backup recovery
  * Backup monitoring
  * Backup security
  * Backup optimization

- **Monitoring metrics**
  * Query performance
  * Resource usage
  * Cache performance
  * Connection usage
  * Error rates
  * Performance trends

## Monitoring Standards

### Backend Monitoring
- API monitoring
  * Response times
  * Error rates
  * Request rates
  * Resource usage
  * Performance metrics
  * Security events

- Resource monitoring
  * CPU usage
  * Memory usage
  * Disk usage
  * Network usage
  * Resource limits
  * Resource trends

- Error monitoring
  * Error rates
  * Error types
  * Error impact
  * Error trends
  * Error resolution
  * Error prevention

- Performance monitoring
  * Response times
  * Resource usage
  * Cache performance
  * Database performance
  * Service performance
  * System performance

- Security monitoring
  * Authentication events
  * Authorization events
  * Security incidents
  * Security trends
  * Security alerts
  * Security audit

- Health checks
  * Service health
  * Database health
  * Cache health
  * Network health
  * System health
  * Security health

### Frontend Monitoring
- **Real-time Monitoring**
  * WebSocket monitoring
  * Message monitoring
  * State monitoring
  * Security monitoring
  * Performance monitoring
  * Error monitoring
  * Connection monitoring
  * Event monitoring

- **UI Monitoring**
  * Component monitoring
  * State monitoring
  * Performance monitoring
  * Error monitoring
  * User interaction
  * Resource usage
  * Rendering performance
  * Network performance

- **State Monitoring**
  * State changes
  * State access
  * State security
  * State performance
  * State errors
  * State audit
  * State persistence
  * State recovery

### Database Monitoring
- Query monitoring
  * Query performance
  * Query errors
  * Query patterns
  * Query optimization
  * Query security
  * Query audit

- Resource monitoring
  * CPU usage
  * Memory usage
  * Disk usage
  * Network usage
  * Resource limits
  * Resource trends

- Error monitoring
  * Query errors
  * Connection errors
  * Transaction errors
  * Error impact
  * Error trends
  * Error resolution

- Performance monitoring
  * Query performance
  * Index performance
  * Cache performance
  * Connection performance
  * Resource performance
  * System performance

- Security monitoring
  * Access monitoring
  * Authentication events
  * Authorization events
  * Security incidents
  * Security trends
  * Security audit

- Health checks
  * Database health
  * Connection health
  * Query health
  * Index health
  * Cache health
  * System health

## Documentation Standards

### API Documentation
- OpenAPI/Swagger
  * API specifications
  * Schema definitions
  * Security schemes
  * Response models
  * Example requests
  * Interactive testing

- Endpoint documentation
  * Endpoint purpose
  * Request format
  * Response format
  * Error handling
  * Authentication
  * Authorization

- Authentication docs
  * Authentication flow
  * Token management
  * Session handling
  * Security requirements
  * Error handling
  * Best practices

- Error handling
  * Error codes
  * Error messages
  * Error handling
  * Error recovery
  * Error prevention
  * Best practices

- Rate limits
  * Rate limit rules
  * Rate limit headers
  * Rate limit handling
  * Rate limit monitoring
  * Rate limit optimization
  * Best practices

- Versioning
  * Version strategy
  * Version headers
  * Version handling
  * Version migration
  * Version deprecation
  * Best practices

### Frontend Documentation
- **Component Documentation**
  * Component purpose
  * Props interface
  * State management
  * Event handling
  * Error handling
  * Usage examples
  * Component testing
  * Component security

- **State Documentation**
  * State structure
  * State updates
  * State persistence
  * State recovery
  * State validation
  * State monitoring
  * State security
  * State optimization

- **Real-time Documentation**
  * WebSocket usage
  * Event handling
  * State updates
  * Error handling
  * Reconnection logic
  * Heartbeat management
  * Security requirements
  * Performance optimization

### Database Documentation
- Schema documentation
  * Table structure
  * Column definitions
  * Index definitions
  * Constraint definitions
  * Relationship definitions
  * Security definitions

- Query documentation
  * Query purpose
  * Query structure
  * Query parameters
  * Query results
  * Query optimization
  * Query security

- Index documentation
  * Index purpose
  * Index structure
  * Index usage
  * Index maintenance
  * Index optimization
  * Index security

- Security documentation
  * Access control
  * Authentication
  * Authorization
  * Data protection
  * Security monitoring
  * Security audit

- Backup documentation
  * Backup strategy
  * Backup schedule
  * Backup validation
  * Backup recovery
  * Backup security
  * Backup monitoring

- Monitoring documentation
  * Monitoring metrics
  * Monitoring tools
  * Monitoring alerts
  * Monitoring dashboards
  * Monitoring security
  * Monitoring audit

## Development Workflow

### Version Control
- Branch strategy
  * Branch naming
  * Branch lifecycle
  * Branch protection
  * Branch merging
  * Branch cleanup
  * Branch security

- Commit conventions
  * Commit message format
  * Commit scope
  * Commit type
  * Commit description
  * Commit references
  * Commit security

- PR process
  * PR creation
  * PR review
  * PR testing
  * PR approval
  * PR merging
  * PR security

- Review process
  * Code review
  * Security review
  * Performance review
  * Documentation review
  * Testing review
  * Review security

- Release process
  * Version management
  * Release notes
  * Release testing
  * Release deployment
  * Release monitoring
  * Release security

- Version tagging
  * Tag format
  * Tag creation
  * Tag validation
  * Tag deployment
  * Tag monitoring
  * Tag security

### Frontend Workflow
- **Development Process**
  * Component development
  * State management
  * Real-time integration
  * Testing
  * Documentation
  * Review process
  * Security review
  * Performance review

- **Testing Process**
  * Unit testing
  * Integration testing
  * Real-time testing
  * UI testing
  * Performance testing
  * Security testing
  * Documentation testing
  * User testing

- **Deployment Process**
  * Build process
  * Testing
  * Documentation
  * Deployment
  * Monitoring
  * Rollback process
  * Security validation
  * Performance validation

### Database Workflow
- Schema changes
  * Change planning
  * Change testing
  * Change validation
  * Change deployment
  * Change monitoring
  * Change security

- Data migrations
  * Migration planning
  * Migration testing
  * Migration validation
  * Migration deployment
  * Migration monitoring
  * Migration security

- Backup process
  * Backup planning
  * Backup testing
  * Backup validation
  * Backup deployment
  * Backup monitoring
  * Backup security

- Recovery process
  * Recovery planning
  * Recovery testing
  * Recovery validation
  * Recovery deployment
  * Recovery monitoring
  * Recovery security

- Monitoring process
  * Monitoring setup
  * Monitoring testing
  * Monitoring validation
  * Monitoring deployment
  * Monitoring maintenance
  * Monitoring security

- Security process
  * Security planning
  * Security testing
  * Security validation
  * Security deployment
  * Security monitoring
  * Security audit

## Error Handling Standards

### Backend Errors
- API errors
  * Error structure
  * Error codes
  * Error messages
  * Error handling
  * Error recovery
  * Error prevention

- Database errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Authentication errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Authorization errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Validation errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- System errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

### Frontend Errors
- **Real-time Errors**
  * Connection errors
  * Message errors
  * State errors
  * Security errors
  * Performance errors
  * Recovery errors
  * Error handling
  * Error prevention

- **UI Errors**
  * Component errors
  * State errors
  * Network errors
  * Security errors
  * Performance errors
  * User errors
  * Error handling
  * Error prevention

- **State Errors**
  * Update errors
  * Persistence errors
  * Recovery errors
  * Validation errors
  * Security errors
  * Monitoring errors
  * Error handling
  * Error prevention

### Database Errors
- Connection errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Query errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Constraint errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Transaction errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Backup errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

- Recovery errors
  * Error types
  * Error handling
  * Error recovery
  * Error prevention
  * Error monitoring
  * Error audit

## Security Standards

### Backend Security
- API security
  * Authentication
  * Authorization
  * Input validation
  * Output validation
  * Security monitoring
  * Security audit

- Database security
  * Access control
  * Authentication
  * Authorization
  * Data protection
  * Security monitoring
  * Security audit

- Authentication security
  * Token security
  * Session security
  * Password security
  * MFA security
  * Security monitoring
  * Security audit

- Authorization security
  * Role security
  * Permission security
  * Resource security
  * Operation security
  * Security monitoring
  * Security audit

- Data security
  * Data protection
  * Data encryption
  * Data masking
  * Data validation
  * Security monitoring
  * Security audit

- System security
  * System protection
  * System monitoring
  * System audit
  * System recovery
  * System maintenance
  * System compliance

### Frontend Security
- **WebSocket Security**
  * Connection security
  * Message security
  * State security
  * Security monitoring
  * Performance security
  * Error security
  * Security validation
  * Security audit

- **Real-time Security**
  * Data security
  * Message security
  * State security
  * Security monitoring
  * Performance security
  * Error security
  * Security validation
  * Security audit

- **State Security**
  * State change security
  * Access security
  * Security monitoring
  * Performance security
  * Error security
  * Audit security
  * Security validation
  * Security compliance

### Database Security
- Access security
  * Access control
  * Authentication
  * Authorization
  * Security monitoring
  * Security audit
  * Security compliance

- Data security
  * Data protection
  * Data encryption
  * Data masking
  * Data validation
  * Security monitoring
  * Security audit

- Backup security
  * Backup protection
  * Backup encryption
  * Backup validation
  * Security monitoring
  * Security audit
  * Security compliance

- Recovery security
  * Recovery protection
  * Recovery validation
  * Security monitoring
  * Security audit
  * Security compliance
  * Security maintenance

- Monitoring security
  * Monitoring protection
  * Monitoring validation
  * Security monitoring
  * Security audit
  * Security compliance
  * Security maintenance

- Audit security
  * Audit protection
  * Audit validation
  * Security monitoring
  * Security audit
  * Security compliance
  * Security maintenance

## Performance Optimization

### Backend Optimization
- API optimization
  * Response optimization
  * Request optimization
  * Cache optimization
  * Load balancing
  * Performance monitoring
  * Performance tuning

- Database optimization
  * Query optimization
  * Index optimization
  * Connection pooling
  * Cache optimization
  * Performance monitoring
  * Performance tuning

- Caching optimization
  * Response caching
  * Data caching
  * Cache invalidation
  * Cache warming
  * Performance monitoring
  * Performance tuning

- Resource optimization
  * CPU optimization
  * Memory optimization
  * Disk optimization
  * Network optimization
  * Performance monitoring
  * Performance tuning

- Security optimization
  * Authentication optimization
  * Authorization optimization
  * Data protection optimization
  * Security monitoring
  * Security audit
  * Security compliance

- Monitoring optimization
  * Monitoring efficiency
  * Monitoring accuracy
  * Monitoring coverage
  * Monitoring security
  * Monitoring audit
  * Monitoring compliance

### Frontend Optimization
- **Real-time Optimization**
  * WebSocket optimization
  * Message optimization
  * State optimization
  * Security optimization
  * Performance optimization
  * Error optimization
  * Resource optimization
  * Monitoring optimization

- **UI Optimization**
  * Component optimization
  * State optimization
  * Network optimization
  * Security optimization
  * Performance optimization
  * Error optimization
  * Resource optimization
  * Monitoring optimization

- **State Optimization**
  * Update optimization
  * Persistence optimization
  * Recovery optimization
  * Validation optimization
  * Security optimization
  * Monitoring optimization
  * Resource optimization
  * Performance optimization

### Database Optimization
- Query optimization
  * Query analysis
  * Index usage
  * Query planning
  * Query caching
  * Performance monitoring
  * Performance tuning

- Index optimization
  * Index analysis
  * Index usage
  * Index maintenance
  * Index caching
  * Performance monitoring
  * Performance tuning

- Connection optimization
  * Connection analysis
  * Connection pooling
  * Connection management
  * Connection caching
  * Performance monitoring
  * Performance tuning

- Cache optimization
  * Cache analysis
  * Cache usage
  * Cache invalidation
  * Cache warming
  * Performance monitoring
  * Performance tuning

- Backup optimization
  * Backup analysis
  * Backup scheduling
  * Backup management
  * Backup validation
  * Performance monitoring
  * Performance tuning

- Monitoring optimization
  * Monitoring analysis
  * Monitoring efficiency
  * Monitoring coverage
  * Monitoring accuracy
  * Performance monitoring
  * Performance tuning

## Constraints
- Local development environment
- Security-first approach
- Performance requirements
- Scalability needs
- Maintenance considerations
- Documentation requirements

## Tokenization Settings
- **AI Context**
  * Estimated chars-per-token: 3.5
  * Max tokens: 120,000
  * Summary threshold: 12,000 chars
  * Context management
  * Memory optimization

## Monitoring and Maintenance
- **Performance Monitoring**
  * Response times
  * Resource usage
  * Error rates
  * Security events
  * User activity

- **Maintenance Tasks**
  * Security updates
  * Dependency updates
  * Database maintenance
  * Log rotation
  * Backup verification

## Changelog
<!-- The agent prepends the latest summary here as a new list item after each VALIDATE phase -->
- [2025-06-21] [AI] [MAJOR] - Successfully completed CORE_INFRASTRUCTURE_SETUP_PHASE: All three infrastructure containers (PostgreSQL database, Django backend, Next.js frontend) orchestrated with Docker Compose, health checks implemented, development environment configured with hot reloading, and comprehensive documentation created
- [2024-12-19] [AI] [MAJOR] - Updated JWT authentication with 30-minute access token expiration and modern datetime handling
- [2024-03-21] [AI] [MAJOR] - Updated project configuration with comprehensive security, testing, and deployment standards
- [2024-03-21] [AI] [MAJOR] - Added detailed domain architecture and critical patterns
- [2024-03-21] [AI] [MAJOR] - Enhanced tech stack with specific versions and features
- [2024-03-21] [AI] [MAJOR] - Added monitoring and maintenance sections

## Django Configuration
- **Project Name**: `api`
- **Settings Module**: `api.settings`
- **Apps Directory**: `core/` (registered in INSTALLED_APPS)
- **URL Configuration**: `api.urls.py`
- **Management Script**: `manage.py` (at root level)

### **Core Dependencies**
- **Framework**: Next.js 14+
- **Language**: TypeScript 5+
- **Package Manager**: pnpm 8+
- **State Management**: Zustand + React Query
- **AI Integration**: OpenAI API

### **UI & Styling**
- **Component Library**: shadcn/ui + Radix UI
- **Styling**: Tailwind CSS
- **Icons**: Radix Icons
- **Animations**: Framer Motion
- **Forms**: React Hook Form + Zod

### **Development Tools**
- **Testing**: Vitest + Testing Library
- **E2E Testing**: Playwright
- **Linting**: ESLint
- **Formatting**: Prettier
- **Git Hooks**: Husky
- **Type Checking**: TypeScript
- **Code Quality**: SonarQube

### **Development Environment**
- **Local Server**: Next.js development server
- **Port**: 3000 (default)
- **Hot Reloading**: Enabled
- **Debug Tools**: Chrome DevTools
- **API Testing**: Postman/Insomnia

### **Version Control**
- **Repository**: Git
- **Branch Strategy**: Git Flow
- **Commit Convention**: Conventional Commits
- **Code Review**: Pull Requests

### **Documentation**
- **API**: OpenAPI/Swagger
- **Code**: JSDoc
- **Architecture**: Architecture Decision Records (ADRs)
- **Component**: Storybook

### **Performance & Monitoring**
- **Analytics**: Custom implementation
- **Error Tracking**: Sentry
- **Performance**: Web Vitals
- **Logging**: Winston

## Constraints
- You have a limited context window (Claude's limitation).
- You can make up to 25 tool calls per turn in Agent Composer mode.
- Adhere to the "Cursor AI Operating Instructions" provided separately.
- Prioritize code quality, maintainability, and security.
- Avoid making assumptions; ask clarifying questions when needed.

## Tokenization Settings
- Estimated chars-per-token: 3.5  
- Max tokens for the AI: 120 0000
- Plan for summary when **workflow-state.mdc** exceeds ~12 K chars.

---

## Changelog
<!-- The agent prepends the latest summary here as a new list item after each VALIDATE phase -->

## Critical Patterns & Conventions

### Tool/Library/Pattern Adoption
- All new tools, libraries, or major dependencies must be documented in the appropriate rule or architecture file.
- All new patterns must be cross-referenced with the current architecture and epic plans.
- Review all new tools/libraries/patterns for compatibility with existing project conventions before adoption.
- Ensure security, testing, and documentation requirements are met for all new additions.

### Checklist for Introducing New Project-Wide Patterns/Dependencies
- [ ] Cross-reference with architecture and epic plans
- [ ] Update this file and relevant rules/epics
- [ ] Document integration and usage patterns
- [ ] Add/expand tests and documentation as needed
- [ ] Review for security, performance, and maintainability
