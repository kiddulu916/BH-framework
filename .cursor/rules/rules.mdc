---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Cursor Rule Organization and Codification
This file contains all cursor rules that should be followed during development. When asked to remember a cursor rule, it will be added to the appropriate section below. All rules in this file must always be followed unless explicitly overridden by the user. 

## Rule Locations and Scope

- **/**: Contains rules and guidelines that apply to the entire application, across all workspaces and domains. Use this location for any rule that should be remembered and enforced globally.
- **/[[domain]]**: e.g.  Contains rules and guidelines that apply only to the [[DOMAIN]] portion of the application. Use this location for rules specific to the [[DOMAIN]] codebase,

## Best Practices
- **All Cursor rules must use the `.mdc` extension.** Do not use `.md` or other extensions for rules files.
- Always write and update rules in the correct workspace according to their intended scope.
- Reference global rules from workspace-specific rules if needed, but do not duplicate content.
- When in doubt, prefer to place rules in the most restrictive (specific) workspace that matches their scope.

---

This meta-rule ensures clarity and consistency in rule management across the project. Update this file if the rule organization strategy changes.

## Rule addition instructions
When the user asks to "remember a cursor rule", add it to the appropriate section below or create a new subsection if needed. 
Always include:
- Clear rule description
- Context for when it applies
- Any exceptions or special cases
- Date added (as a commnet)
- Keep the rule as short as possible without sacrificing clarity and understanding

IMPORTANT: If below rules get larger than 500 lines, break up the rules into meaningful groups and store them as separate files in .cursor/rules directory starting with rules- prefix.  Then make sure to add the reference in this file to it with short instructions on how to read it and follow it. 

## Development Rules
- All new rules must be cross-referenced with the current architecture and epic plans. If a new pattern or convention is introduced, update the relevant architecture or epic documentation and reference it in the rule.  # [2024-06-07]

## Pattern-Specific Rules

### Backend Architecture Patterns
- **File**: `.cursor/rules/backend-architecture.mdc`
- **Scope**: Backend development patterns and layered architecture
- **Key Patterns**: 
  - API Layer (Django Ninja with standardized APIResponse)
  - Service Layer (Business logic with dependency injection)
  - Repository Layer (Data access inheriting from BaseRepository)
  - Model Layer (SQLAlchemy ORM inheriting from BaseModel)
  - Testing with HTTPX and ASGITransport
- **Usage**: Follow when developing backend features, APIs, or services

### Stage Container Patterns
- **File**: `.cursor/rules/stage-container-patterns.mdc`
- **Scope**: Stage container development and execution
- **Key Patterns**:
  - Stage container structure and organization
  - API integration with JWT authentication
  - Output directory structure and file naming
  - Tool runner patterns and error handling
  - Target management and environment configuration
- **Usage**: Follow when developing new stage containers or modifying existing ones

### Docker and Containerization Patterns
- **File**: `.cursor/rules/docker-containerization.mdc`
- **Scope**: Docker Compose configuration and container orchestration
- **Key Patterns**:
  - Service organization and dependencies
  - Health check patterns
  - Environment configuration management
  - Volume and network configuration
  - Resource management and security
- **Usage**: Follow when modifying Docker configuration or adding new services

### Testing Patterns
- **File**: `.cursor/rules/testing-patterns.mdc`
- **Scope**: Testing standards and patterns
- **Key Patterns**:
  - Test organization and structure
  - HTTPX integration testing with ASGITransport
  - Pytest fixtures and configuration
  - Model and service layer testing
  - Integration testing patterns
- **Usage**: Follow when writing tests or modifying test infrastructure

### AI/ML Security Patterns
- **File**: `.cursor/rules/ai-ml-security-patterns.mdc`
- **Scope**: AI/ML integration in security testing and analysis
- **Key Patterns**:
  - AI/ML framework integration (PyTorch, TensorFlow, Transformers)
  - Vulnerability analysis with AI models
  - Browser automation with AI integration
  - Evidence collection with AI analysis
  - Comprehensive reporting with AI insights
  - Performance optimization for AI/ML workloads
- **Usage**: Follow when implementing AI/ML features in security testing stages

### Environment Configuration Patterns
- **File**: `.cursor/rules/environment-configuration.mdc`
- **Scope**: Environment configuration across all components
- **Key Patterns**:
  - Standardized environment file templates
  - Stage-specific environment variables
  - Docker Compose environment patterns
  - JWT token management
  - Resource management and limits
  - Health check configuration
  - Logging configuration
- **Usage**: Follow when configuring environment variables, Docker services, or stage containers

## Cross-Reference Rules
- When implementing backend features, reference both backend-architecture.mdc and testing-patterns.mdc
- When creating stage containers, reference stage-container-patterns.mdc, docker-containerization.mdc, and environment-configuration.mdc
- When implementing AI/ML features, reference ai-ml-security-patterns.mdc and ensure compatibility with stage-container-patterns.mdc
- When modifying Docker configuration, reference docker-containerization.mdc and environment-configuration.mdc
- When writing tests, reference testing-patterns.mdc and ensure alignment with backend-architecture.mdc patterns
- When configuring environments, reference environment-configuration.mdc and ensure consistency across all stages 

 