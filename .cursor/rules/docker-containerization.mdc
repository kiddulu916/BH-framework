---
description: 
globs: backend/**/*.*,frontend/**/*,stages/**/*,db/**/*.*
alwaysApply: false
---
---
description: Docker containerization rules
globs: backend/**/*.*, frontend/**/*, stages/**/*, db/**/*.*
alwaysApply: true
---
# Docker and Containerization Patterns

## Docker Compose Architecture

### 1. **Service Organization**
- **Core services**: `db`, `backend`, `frontend`
- **Stage containers**: Individual containers for each bug hunting stage
- **Support services**: `jwt_rotator`, `agent_coordinator`, `agent_worker`
- **Network**: All services on `bug-hunting-network`

### 2. **Service Dependencies**
- **Database first**: All services depend on `db` with health check
- **Backend dependencies**: `backend` depends on healthy `db`
- **Frontend dependencies**: `frontend` depends on healthy `backend`
- **Stage containers**: Depend on healthy `backend`

### 3. **Health Check Pattern**
- **Database**: `pg_isready` command
- **Backend**: HTTP health check endpoint
- **Frontend**: HTTP health check endpoint
- **Agents**: Custom health check endpoints

## Database Service Configuration

### 1. **PostgreSQL Configuration**
- **Image**: Custom PostgreSQL image with initialization
- **Environment variables**: Use `.env` file for configuration
- **Volumes**: Persistent data storage
- **Ports**: Expose 5432 for local development
- **Health check**: `pg_isready` with proper credentials

### 2. **Database Service Pattern**
```yaml
db:
  build:
    context: ./db
    dockerfile: Dockerfile
  container_name: bug-hunting-db
  restart: unless-stopped
  environment:
    POSTGRES_DB: ${DB_NAME}
    POSTGRES_USER: ${DB_USER}
    POSTGRES_PASSWORD: ${DB_PASSWORD}
    POSTGRES_HOST: ${DB_HOST}
    POSTGRES_PORT: ${DB_PORT}
  ports:
    - "5432:5432"
  volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./db/postgres:/docker-entrypoint-initdb.d
  networks:
    - bug-hunting-network
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 30s
```

## Backend Service Configuration

### 1. **Django Backend Pattern**
- **Build context**: `./backend`
- **Dependencies**: Wait for healthy database
- **Environment**: Comprehensive environment variable configuration
- **Volumes**: Mount source code for development
- **Ports**: Expose 8000 for API access

### 2. **Backend Service Configuration**
```yaml
backend:
  build:
    context: ./backend
    dockerfile: Dockerfile
  container_name: bug-hunting-backend
  restart: unless-stopped
  depends_on:
    db:
      condition: service_healthy
  environment:
    - DATABASE_URL=${DATABASE_URL}
    - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
    - DEBUG=${DEBUG}
    - SECRET_KEY=${SECRET_KEY}
    - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
    - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
    - LOG_LEVEL=${LOG_LEVEL}
    - LOG_FORMAT=${LOG_FORMAT}
    - ENABLE_METRICS=${ENABLE_METRICS}
    - METRICS_PORT=${METRICS_PORT}
  ports:
    - "8000:8000"
  volumes:
    - ./backend:/app
    - ./outputs:/app/outputs
    - /var/run/docker.sock:/var/run/docker.sock
  networks:
    - bug-hunting-network
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 40s
```

## Frontend Service Configuration

### 1. **Next.js Frontend Pattern**
- **Build context**: `./frontend`
- **Dependencies**: Wait for healthy backend
- **Environment**: API URL configuration
- **Ports**: Expose 3000 for web access
- **Hot reloading**: Mount source code for development

### 2. **Frontend Service Configuration**
```yaml
frontend:
  build:
    context: ./frontend
    dockerfile: Dockerfile
  container_name: bug-hunting-frontend
  restart: unless-stopped
  depends_on:
    backend:
      condition: service_healthy
  environment:
    - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
  ports:
    - "3000:3000"
  volumes:
    - ./frontend:/app
    - /app/node_modules
  networks:
    - bug-hunting-network
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 30s
```

## Background Agent Services

### 1. **Agent Coordinator Pattern**
- **Purpose**: Coordinate background tasks and agent workers
- **Configuration**: Comprehensive environment variable setup
- **Resource limits**: Memory and CPU constraints
- **Health monitoring**: Custom health check endpoint
- **Logging**: Structured logging with rotation

### 2. **Agent Worker Pattern**
- **Purpose**: Execute individual tasks
- **Scalability**: Multiple worker instances
- **Communication**: Connect to coordinator
- **Resource management**: Individual resource limits

### 3. **Agent Service Configuration**
```yaml
agent_coordinator:
  build:
    context: .
    dockerfile: .cursor/Dockerfile
  container_name: bug-hunting-agent-coordinator
  restart: unless-stopped
  depends_on:
    backend:
      condition: service_healthy
  environment:
    # Agent Identity
    - AGENT_ID=${AGENT_ID:-bug-hunting-agent-001}
    - AGENT_NAME=${AGENT_NAME:-Bug Hunting Framework Agent}
    - AGENT_VERSION=${AGENT_VERSION:-1.0.0}
    - AGENT_ENVIRONMENT=${AGENT_ENVIRONMENT:-development}
    
    # Runtime Settings
    - AGENT_MAX_CONCURRENT_TASKS=${AGENT_MAX_CONCURRENT_TASKS:-5}
    - AGENT_TASK_TIMEOUT_SECONDS=${AGENT_TASK_TIMEOUT_SECONDS:-3600}
    - AGENT_HEARTBEAT_INTERVAL_SECONDS=${AGENT_HEARTBEAT_INTERVAL_SECONDS:-30}
    
    # Communication
    - AGENT_API_ENDPOINT=${AGENT_API_ENDPOINT:-http://backend:8000/api/agents}
    - AGENT_WEBSOCKET_ENDPOINT=${AGENT_WEBSOCKET_ENDPOINT:-ws://backend:8000/ws/agents}
    
    # Backend Integration
    - PYTHONPATH=/home/ubuntu/projects/bug-hunting-framework/backend
    - DJANGO_SETTINGS_MODULE=api.settings
    - DATABASE_URL=${DATABASE_URL}
    - JWT_SECRET_KEY=${JWT_SECRET_KEY}
  ports:
    - "9091:9091"  # Agent metrics
  volumes:
    - ./:/home/ubuntu/projects/bug-hunting-framework
    - ./outputs:/home/ubuntu/projects/bug-hunting-framework/outputs
    - ./data:/home/ubuntu/projects/bug-hunting-framework/data
    - /var/run/docker.sock:/var/run/docker.sock
    - agent_logs:/var/log
    - agent_cache:/var/cache/agent
  networks:
    - bug-hunting-network
  deploy:
    resources:
      limits:
        memory: ${AGENT_MAX_MEMORY_MB:-2048}M
        cpus: '0.8'
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
```

## Stage Container Patterns

### 1. **Stage Container Structure**
- **Base image**: Lightweight Python image (python:3.11-slim)
- **Tool installation**: Install required security tools
- **Working directory**: `/app`
- **Entry point**: Main execution script

### 2. **Stage Container Dockerfile Pattern**
```dockerfile
FROM python:3.11-slim

# Install system dependencies and tools
RUN apt-get update && apt-get install -y \
    curl \
    nmap \
    subfinder \
    amass \
    httpx \
    nuclei \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy stage files
COPY . .

# Set entry point
CMD ["python", "run_stage_name.py"]
```

### 3. **Stage Container Service Pattern**
```yaml
stage_name:
  build:
    context: ./stages/stage_name
    dockerfile: Dockerfile
  container_name: bug-hunting-stage-name
  restart: unless-stopped
  depends_on:
    backend:
      condition: service_healthy
  environment:
    - BACKEND_API_URL=http://backend:8000/api/results/stage-name
    - BACKEND_JWT_TOKEN=${JWT_SECRET_KEY}
    - TARGET=${TARGET}
  volumes:
    - ./outputs:/outputs
    - ./stages/stage_name/.env:/app/.env
  networks:
    - bug-hunting-network
```

## Environment Configuration

### 1. **Environment Variable Organization**
- **Database**: `DB_*` variables for PostgreSQL configuration
- **Django**: `DJANGO_*`, `SECRET_KEY`, `DEBUG` variables
- **JWT**: `JWT_*` variables for authentication
- **Frontend**: `NEXT_PUBLIC_*` variables for client-side configuration
- **Agent**: `AGENT_*` variables for background agent configuration

### 2. **Environment File Structure**
```bash
# Database Configuration
DB_NAME=bug_hunting_framework
DB_USER=postgres
DB_PASSWORD=postgres
DB_HOST=db
DB_PORT=5432
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# Django Configuration
DJANGO_SETTINGS_MODULE=api.settings
DEBUG=True
SECRET_KEY=your-secret-key-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend,frontend,db
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# JWT Configuration
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# Frontend Configuration
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws

# Agent Configuration
AGENT_ID=bug-hunting-agent-001
AGENT_NAME=Bug Hunting Framework Agent
AGENT_VERSION=1.0.0
AGENT_ENVIRONMENT=development
```

## Volume Management

### 1. **Named Volumes**
- **Database**: `postgres_data` for persistent database storage
- **Agent logs**: `agent_logs` for agent log files
- **Agent cache**: `agent_cache` for agent caching

### 2. **Bind Mounts**
- **Source code**: Mount source directories for development
- **Outputs**: Mount `/outputs` for stage results
- **Environment files**: Mount `.env` files for configuration
- **Docker socket**: Mount for container orchestration

### 3. **Volume Configuration**
```yaml
volumes:
  postgres_data:
    driver: local
  agent_logs:
    driver: local
  agent_cache:
    driver: local
```

## Network Configuration

### 1. **Custom Network**
- **Network name**: `bug-hunting-network`
- **Driver**: `bridge` (default)
- **Purpose**: Isolated communication between services

### 2. **Network Configuration**
```yaml
networks:
  bug-hunting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
```

## Resource Management

### 1. **Resource Limits**
- **Memory limits**: Set appropriate memory limits for each service
- **CPU limits**: Set CPU limits to prevent resource exhaustion
- **Disk quotas**: Set disk quotas for data-intensive services

### 2. **Resource Configuration Pattern**
```yaml
deploy:
  resources:
    limits:
      memory: 2048M
      cpus: '0.8'
    reservations:
      memory: 1024M
      cpus: '0.4'
```

## Security Configuration

### 1. **Security Best Practices**
- **Non-root users**: Run containers as non-root users
- **Read-only filesystems**: Use read-only filesystems where possible
- **Secrets management**: Use Docker secrets for sensitive data
- **Network isolation**: Use custom networks for service isolation

### 2. **Security Configuration Pattern**
```dockerfile
# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set ownership
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser
```

## Monitoring and Health Checks

### 1. **Health Check Patterns**
- **HTTP health checks**: Use curl for HTTP services
- **Command health checks**: Use specific commands for database services
- **Interval configuration**: Set appropriate intervals and timeouts

### 2. **Health Check Configuration**
```yaml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 40s
```

## Development vs Production

### 1. **Development Configuration**
- **Volume mounts**: Mount source code for hot reloading
- **Debug mode**: Enable debug mode and verbose logging
- **Port exposure**: Expose ports for local development

### 2. **Production Configuration**
- **Multi-stage builds**: Use multi-stage builds for smaller images
- **Security hardening**: Implement security best practices
- **Resource optimization**: Optimize resource usage
- **Monitoring**: Implement comprehensive monitoring

