---
description: 
globs: backend/**/*.*
alwaysApply: false
---
---
description: Backend architecture guidelines, layering, and service structure
globs: backend/**/*.*
alwaysApply: true
---
# Backend Architecture Rules

## Layered Architecture Pattern

### 1. **API Layer (Django Ninja)**
- **Location**: `backend/core/api/`
- **Pattern**: Django Ninja routers with standardized APIResponse
- **Structure**:
  ```python
  from ninja import Router
  from core.schemas.base import APIResponse
  from core.tasks.service_name import ServiceName
  from core.utils.database import get_db_session
  
  router = Router()
  
  @router.post("/", response=APIResponse, summary="Endpoint description")
  async def endpoint_name(request: HttpRequest, payload: SchemaName):
      try:
          async with get_db_session() as session:
              service = ServiceName(session)
              result = await service.method_name(payload)
              return APIResponse(success=True, message="Success", data=result.model_dump())
      except Exception as e:
          return APIResponse(success=False, message="Error", errors=[str(e)])
  ```

### 2. **Service Layer (Business Logic)**
- **Location**: `backend/core/tasks/`
- **Pattern**: Service classes with dependency injection
- **Structure**:
  ```python
  class ServiceName:
      def __init__(self, session: AsyncSession):
          self.session = session
          self.repository = RepositoryName(session)
      
      async def method_name(self, payload: SchemaName) -> ResponseSchema:
          # Business logic here
          pass
  ```

### 3. **Repository Layer (Data Access)**
- **Location**: `backend/core/repositories/`
- **Pattern**: Inherit from BaseRepository for common CRUD operations
- **Structure**:
  ```python
  from core.repositories.base import BaseRepository
  
  class RepositoryName(BaseRepository):
      def __init__(self, session: AsyncSession):
          super().__init__(session, ModelName)
      
      async def custom_method(self, **kwargs):
          # Custom data access logic
          pass
  ```

### 4. **Model Layer (SQLAlchemy ORM)**
- **Location**: `backend/core/models/`
- **Pattern**: Inherit from BaseModel for common fields
- **Structure**:
  ```python
  from core.models.base import BaseModel
  from sqlalchemy import Column, String, Enum
  from sqlalchemy.dialects.postgresql import UUID, JSONB
  
  class ModelName(BaseModel):
      __tablename__ = "model_name"
      
      # Custom fields
      name = Column(String, nullable=False)
      status = Column(Enum(StatusEnum), nullable=False)
      metadata = Column(JSONB, nullable=True)
  ```

## API Response Standards

### 1. **Standardized APIResponse Model**
- **Always use**: `core.schemas.base.APIResponse`
- **Pattern**:
  ```python
  # Success response
  return APIResponse(
      success=True,
      message="Operation successful",
      data=result.model_dump(),
      errors=None
  )
  
  # Error response
  return APIResponse(
      success=False,
      message="Operation failed",
      data=None,
      errors=[str(error)]
  )
  ```

### 2. **Exception Handling**
- **Global handlers**: Defined in `core/api/__init__.py`
- **Service layer**: Use custom exceptions from `core.utils.exceptions`
- **Pattern**:
  ```python
  from core.utils.exceptions import NotFoundError, ValidationError
  
  try:
      result = await service.operation(payload)
      return APIResponse.success_response("Success", result.model_dump())
  except ValidationError as e:
      return APIResponse.error_response("Validation error", [str(e)])
  except NotFoundError as e:
      return APIResponse.error_response("Not found", [str(e)])
  ```

## Database Patterns

### 1. **Async Database Sessions**
- **Pattern**: Use `get_db_session()` context manager
- **Structure**:
  ```python
  from core.utils.database import get_db_session
  
  async def endpoint(request, payload):
      async with get_db_session() as session:
          service = ServiceName(session)
          result = await service.operation(payload)
          return APIResponse(success=True, data=result.model_dump())
  ```

### 2. **Model Inheritance**
- **Base model**: All models inherit from `BaseModel`
- **Common fields**: `id`, `created_at`, `updated_at`, `description`, `notes`
- **UUID primary keys**: Use `UUID(as_uuid=True)` for all IDs

### 3. **Repository Pattern**
- **Base repository**: `BaseRepository` provides common CRUD operations
- **Custom methods**: Add specific methods to each repository
- **Error handling**: Use repository methods that raise appropriate exceptions

## Schema Patterns

### 1. **Pydantic Schemas**
- **Location**: `backend/core/schemas/`
- **Base classes**: Use `BaseModelSchema`, `TimestampedSchema`, `IDSchema`
- **Validation**: Use Pydantic validators for business logic validation

### 2. **Request/Response Schemas**
- **Request schemas**: `CreateSchema`, `UpdateSchema`
- **Response schemas**: `ResponseSchema`, `ListResponseSchema`
- **Pattern**:
  ```python
  class CreateSchema(BaseModelSchema):
      name: str = Field(..., description="Name field")
      
  class ResponseSchema(TimestampedSchema, IDSchema):
      name: str = Field(..., description="Name field")
  ```

## Testing Patterns

### 1. **HTTPX with ASGITransport**
- **Pattern**: Use HTTPX for integration testing
- **Structure**:
  ```python
  from httpx import AsyncClient, ASGITransport
  from api.asgi import application
  
  @pytest_asyncio.fixture
  async def api_client():
      transport = ASGITransport(app=application)
      async with AsyncClient(transport=transport, base_url="http://testserver") as client:
          yield client
  ```

### 2. **Test Fixtures**
- **Database fixtures**: Use `db_session` fixture for database tests
- **Model factories**: Use `TestDataFactory` for creating test data
- **JWT authentication**: Include JWT tokens in test headers

### 3. **Test Assertions**
- **Success cases**: Assert `response.status_code == 200` and `data["success"] is True`
- **Error cases**: Assert `response.status_code == 200` and `data["success"] is False`
- **Framework errors**: Assert appropriate HTTP status codes (422, 404, etc.)

## Error Handling Standards

### 1. **Custom Exceptions**
- **Location**: `backend/core/utils/exceptions.py`
- **Types**: `NotFoundError`, `ValidationError`, `DatabaseError`, `AuthenticationError`
- **Usage**: Raise in service layer, catch in API layer

### 2. **Global Exception Handlers**
- **Location**: `backend/core/api/__init__.py`
- **Types**: `Exception`, `ValueError`, `KeyError`
- **Response**: Always return `APIResponse` with appropriate error details

## Security Patterns

### 1. **JWT Authentication**
- **Token management**: Use HTTP-only cookies for token storage
- **Token rotation**: Implement automatic token refresh
- **Validation**: Validate tokens in middleware

### 2. **Input Validation**
- **Pydantic schemas**: Use for request validation
- **Business validation**: Implement in service layer
- **Sanitization**: Sanitize all user inputs

## Performance Patterns

### 1. **Async Operations**
- **Database**: Use async SQLAlchemy operations
- **HTTP clients**: Use async HTTPX for external API calls
- **File operations**: Use async file operations where possible

### 2. **Connection Pooling**
- **Database**: Configure connection pooling in database settings
- **HTTP clients**: Use connection pooling for external API calls

## Documentation Standards

### 1. **API Documentation**
- **OpenAPI**: Auto-generated from Django Ninja
- **Endpoint docs**: Include summary and description for all endpoints
- **Schema docs**: Document all request/response schemas

### 2. **Code Documentation**
- **Docstrings**: Include comprehensive docstrings for all functions
- **Type hints**: Use type hints throughout the codebase
- **Comments**: Add comments for complex business logic

## Development Workflow

### 1. **Code Organization**
- **Follow layered architecture**: API → Service → Repository → Model
- **Separation of concerns**: Keep business logic in service layer
- **Dependency injection**: Inject dependencies into service classes

### 2. **Testing Requirements**
- **Unit tests**: Test service layer methods
- **Integration tests**: Test API endpoints with HTTPX
- **Coverage**: Maintain high test coverage

### 3. **Code Quality**
- **Type hints**: Use throughout the codebase
- **Error handling**: Implement proper error handling at all layers
- **Validation**: Validate inputs at API and service layers



