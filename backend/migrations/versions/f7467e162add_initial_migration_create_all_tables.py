"""Initial migration - create all tables

Revision ID: f7467e162add
Revises: 
Create Date: 2025-07-17 01:58:18.444241

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f7467e162add'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('platform', sa.String(length=100), nullable=True),
    sa.Column('platform_username', sa.String(length=255), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('session_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_users_active', 'users', ['is_active'], unique=False, schema='public')
    op.create_index('idx_users_email', 'users', ['email'], unique=False, schema='public')
    op.create_index('idx_users_platform', 'users', ['platform'], unique=False, schema='public')
    op.create_index(op.f('ix_public_users_created_at'), 'users', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_users_email'), 'users', ['email'], unique=True, schema='public')
    op.create_index(op.f('ix_public_users_id'), 'users', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_users_is_active'), 'users', ['is_active'], unique=False, schema='public')
    op.create_index(op.f('ix_public_users_name'), 'users', ['name'], unique=False, schema='public')
    op.create_table('targets',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('scope', sa.Enum('DOMAIN', 'IP_RANGE', 'SUBNET', 'WILDCARD', name='targetscope'), nullable=False),
    sa.Column('value', sa.String(length=500), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'ARCHIVED', 'BLACKLISTED', name='targetstatus'), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('scope_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('program_name', sa.String(length=255), nullable=True),
    sa.Column('platform', sa.Enum('HACKERONE', 'BUGCROWD', 'INTIGRITI', 'YESWEHACK', 'CUSTOM', name='bugbountyplatform'), nullable=True),
    sa.Column('program_description', sa.Text(), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=True),
    sa.Column('contact_url', sa.String(length=500), nullable=True),
    sa.Column('approved_urls', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('blacklisted_urls', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scope_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rate_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('special_instructions', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_targets_scope_value', 'targets', ['scope', 'value'], unique=False, schema='public')
    op.create_index('idx_targets_status', 'targets', ['status'], unique=False, schema='public')
    op.create_index('idx_targets_user', 'targets', ['user_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_created_at'), 'targets', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_id'), 'targets', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_is_primary'), 'targets', ['is_primary'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_name'), 'targets', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_program_name'), 'targets', ['program_name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_targets_value'), 'targets', ['value'], unique=False, schema='public')
    op.create_table('active_recon_results',
    sa.Column('execution_id', sa.String(length=255), nullable=False),
    sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scan_type', sa.String(length=100), nullable=True),
    sa.Column('hosts_scanned', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('total_hosts_scanned', sa.Integer(), nullable=False),
    sa.Column('hosts_with_open_ports', sa.Integer(), nullable=False),
    sa.Column('total_open_ports', sa.Integer(), nullable=False),
    sa.Column('total_services_detected', sa.Integer(), nullable=False),
    sa.Column('raw_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_active_recon_created', 'active_recon_results', ['created_at'], unique=False, schema='public')
    op.create_index('idx_active_recon_execution', 'active_recon_results', ['execution_id'], unique=False, schema='public')
    op.create_index('idx_active_recon_target', 'active_recon_results', ['target_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_active_recon_results_created_at'), 'active_recon_results', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_active_recon_results_execution_id'), 'active_recon_results', ['execution_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_active_recon_results_id'), 'active_recon_results', ['id'], unique=False, schema='public')
    op.create_table('kill_chains',
    sa.Column('execution_id', sa.String(length=255), nullable=True),
    sa.Column('total_paths_identified', sa.Integer(), nullable=False),
    sa.Column('critical_paths', sa.Integer(), nullable=False),
    sa.Column('high_paths', sa.Integer(), nullable=False),
    sa.Column('medium_paths', sa.Integer(), nullable=False),
    sa.Column('low_paths', sa.Integer(), nullable=False),
    sa.Column('info_paths', sa.Integer(), nullable=False),
    sa.Column('verified_paths', sa.Integer(), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.Column('analysis_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('raw_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('kill_chain_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('analysis_type', sa.String(length=100), nullable=True),
    sa.Column('methodology', sa.String(length=255), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('exploitable_paths', sa.Integer(), nullable=False),
    sa.Column('blocked_paths', sa.Integer(), nullable=False),
    sa.Column('raw_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed_paths', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_kill_chains_created', 'kill_chains', ['created_at'], unique=False, schema='public')
    op.create_index('idx_kill_chains_execution', 'kill_chains', ['execution_id'], unique=False, schema='public')
    op.create_index('idx_kill_chains_target', 'kill_chains', ['target_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_kill_chains_created_at'), 'kill_chains', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_kill_chains_execution_id'), 'kill_chains', ['execution_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_kill_chains_id'), 'kill_chains', ['id'], unique=False, schema='public')
    op.create_table('passive_recon_results',
    sa.Column('execution_id', sa.String(length=255), nullable=False),
    sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_subdomains', sa.Integer(), nullable=False),
    sa.Column('unique_subdomains', sa.Integer(), nullable=False),
    sa.Column('active_subdomains', sa.Integer(), nullable=False),
    sa.Column('raw_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('execution_time', sa.String(length=50), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('extra_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_passive_recon_created', 'passive_recon_results', ['created_at'], unique=False, schema='public')
    op.create_index('idx_passive_recon_execution', 'passive_recon_results', ['execution_id'], unique=False, schema='public')
    op.create_index('idx_passive_recon_target', 'passive_recon_results', ['target_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_passive_recon_results_created_at'), 'passive_recon_results', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_passive_recon_results_execution_id'), 'passive_recon_results', ['execution_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_passive_recon_results_id'), 'passive_recon_results', ['id'], unique=False, schema='public')
    op.create_table('vulnerabilities',
    sa.Column('execution_id', sa.String(length=255), nullable=False),
    sa.Column('scan_type', sa.String(length=100), nullable=True),
    sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scan_targets', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_findings', sa.Integer(), nullable=False),
    sa.Column('critical_findings', sa.Integer(), nullable=False),
    sa.Column('high_findings', sa.Integer(), nullable=False),
    sa.Column('medium_findings', sa.Integer(), nullable=False),
    sa.Column('low_findings', sa.Integer(), nullable=False),
    sa.Column('info_findings', sa.Integer(), nullable=False),
    sa.Column('raw_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('execution_time', sa.String(length=50), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_vulnerabilities_created', 'vulnerabilities', ['created_at'], unique=False, schema='public')
    op.create_index('idx_vulnerabilities_execution', 'vulnerabilities', ['execution_id'], unique=False, schema='public')
    op.create_index('idx_vulnerabilities_target', 'vulnerabilities', ['target_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerabilities_created_at'), 'vulnerabilities', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerabilities_execution_id'), 'vulnerabilities', ['execution_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerabilities_id'), 'vulnerabilities', ['id'], unique=False, schema='public')
    op.create_table('workflows',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('stages', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'PAUSED', name='workflowstatus'), nullable=False),
    sa.Column('current_stage', sa.Enum('PASSIVE_RECON', 'ACTIVE_RECON', 'VULN_SCAN', 'VULN_TEST', 'KILL_CHAIN', 'REPORT', name='workflowstage'), nullable=True),
    sa.Column('progress', sa.String(length=50), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_workflows_current_stage', 'workflows', ['current_stage'], unique=False, schema='public')
    op.create_index('idx_workflows_status', 'workflows', ['status'], unique=False, schema='public')
    op.create_index('idx_workflows_target', 'workflows', ['target_id'], unique=False, schema='public')
    op.create_index('idx_workflows_user', 'workflows', ['user_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflows_created_at'), 'workflows', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflows_id'), 'workflows', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflows_name'), 'workflows', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflows_status'), 'workflows', ['status'], unique=False, schema='public')
    op.create_table('attack_paths',
    sa.Column('name', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('IDENTIFIED', 'VERIFIED', 'EXPLOITED', 'BLOCKED', 'FALSE_POSITIVE', name='attackpathstatus'), nullable=False),
    sa.Column('attack_path_type', sa.String(length=100), nullable=True),
    sa.Column('severity', sa.String(length=50), nullable=True),
    sa.Column('stages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('entry_points', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('exit_points', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('prerequisites', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('techniques', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tools_required', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('evidence', sa.Text(), nullable=True),
    sa.Column('proof_of_concept', sa.Text(), nullable=True),
    sa.Column('screenshots', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('impact_assessment', sa.Text(), nullable=True),
    sa.Column('remediation', sa.Text(), nullable=True),
    sa.Column('attack_path_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('phases', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tactics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('intermediate_nodes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('likelihood', sa.String(length=50), nullable=True),
    sa.Column('impact', sa.String(length=50), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_evidence', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('is_exploitable', sa.Boolean(), nullable=False),
    sa.Column('exploitation_evidence', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('exploitation_notes', sa.Text(), nullable=True),
    sa.Column('mitigation_controls', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('recommended_controls', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('kill_chain_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['kill_chain_id'], ['public.kill_chains.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_attack_paths_exploitable', 'attack_paths', ['is_exploitable'], unique=False, schema='public')
    op.create_index('idx_attack_paths_kill_chain', 'attack_paths', ['kill_chain_id'], unique=False, schema='public')
    op.create_index('idx_attack_paths_name', 'attack_paths', ['name'], unique=False, schema='public')
    op.create_index('idx_attack_paths_status', 'attack_paths', ['status'], unique=False, schema='public')
    op.create_index('idx_attack_paths_verified', 'attack_paths', ['is_verified'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_created_at'), 'attack_paths', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_id'), 'attack_paths', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_is_exploitable'), 'attack_paths', ['is_exploitable'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_is_verified'), 'attack_paths', ['is_verified'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_name'), 'attack_paths', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_attack_paths_status'), 'attack_paths', ['status'], unique=False, schema='public')
    op.create_table('ports',
    sa.Column('host', sa.String(length=255), nullable=False),
    sa.Column('port_number', sa.Integer(), nullable=False),
    sa.Column('protocol', sa.String(length=10), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'CLOSED', 'FILTERED', 'UNFILTERED', 'OPEN_FILTERED', 'CLOSED_FILTERED', 'UNKNOWN', name='portstatus'), nullable=False),
    sa.Column('is_open', sa.Boolean(), nullable=False),
    sa.Column('service_name', sa.String(length=255), nullable=True),
    sa.Column('service_version', sa.String(length=255), nullable=True),
    sa.Column('service_product', sa.String(length=255), nullable=True),
    sa.Column('banner', sa.Text(), nullable=True),
    sa.Column('script_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('active_recon_result_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['active_recon_result_id'], ['public.active_recon_results.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_ports_active_recon', 'ports', ['active_recon_result_id'], unique=False, schema='public')
    op.create_index('idx_ports_host', 'ports', ['host'], unique=False, schema='public')
    op.create_index('idx_ports_host_port', 'ports', ['host', 'port_number', 'protocol'], unique=False, schema='public')
    op.create_index('idx_ports_number', 'ports', ['port_number'], unique=False, schema='public')
    op.create_index('idx_ports_open', 'ports', ['is_open'], unique=False, schema='public')
    op.create_index('idx_ports_protocol', 'ports', ['protocol'], unique=False, schema='public')
    op.create_index('idx_ports_service', 'ports', ['service_name'], unique=False, schema='public')
    op.create_index('idx_ports_status', 'ports', ['status'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_created_at'), 'ports', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_host'), 'ports', ['host'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_id'), 'ports', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_is_open'), 'ports', ['is_open'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_port_number'), 'ports', ['port_number'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_protocol'), 'ports', ['protocol'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_service_name'), 'ports', ['service_name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_ports_status'), 'ports', ['status'], unique=False, schema='public')
    op.create_table('reports',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('report_type', sa.Enum('EXECUTIVE_SUMMARY', 'TECHNICAL_DETAILED', 'VULNERABILITY_REPORT', 'KILL_CHAIN_ANALYSIS', 'COMPLIANCE_REPORT', 'CUSTOM', name='reporttype'), nullable=False),
    sa.Column('format', sa.Enum('PDF', 'HTML', 'MARKDOWN', 'JSON', 'XML', name='reportformat'), nullable=False),
    sa.Column('status', sa.Enum('GENERATING', 'COMPLETED', 'FAILED', 'CANCELLED', name='reportstatus'), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('file_path', sa.String(length=1000), nullable=True),
    sa.Column('file_size', sa.String(length=50), nullable=True),
    sa.Column('template_used', sa.String(length=255), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('key_findings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('statistics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('generation_time', sa.String(length=50), nullable=True),
    sa.Column('generated_by', sa.String(length=255), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('access_token', sa.String(length=255), nullable=True),
    sa.Column('expires_at', sa.String(length=50), nullable=True),
    sa.Column('target_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('workflow_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['target_id'], ['public.targets.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['public.workflows.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_reports_created', 'reports', ['created_at'], unique=False, schema='public')
    op.create_index('idx_reports_format', 'reports', ['format'], unique=False, schema='public')
    op.create_index('idx_reports_name', 'reports', ['name'], unique=False, schema='public')
    op.create_index('idx_reports_status', 'reports', ['status'], unique=False, schema='public')
    op.create_index('idx_reports_target', 'reports', ['target_id'], unique=False, schema='public')
    op.create_index('idx_reports_type', 'reports', ['report_type'], unique=False, schema='public')
    op.create_index('idx_reports_user', 'reports', ['user_id'], unique=False, schema='public')
    op.create_index('idx_reports_workflow', 'reports', ['workflow_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_access_token'), 'reports', ['access_token'], unique=True, schema='public')
    op.create_index(op.f('ix_public_reports_created_at'), 'reports', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_format'), 'reports', ['format'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_id'), 'reports', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_is_public'), 'reports', ['is_public'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_name'), 'reports', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_report_type'), 'reports', ['report_type'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_status'), 'reports', ['status'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_workflow_id'), 'reports', ['workflow_id'], unique=False, schema='public')
    op.create_table('subdomains',
    sa.Column('name', sa.String(length=500), nullable=False),
    sa.Column('domain', sa.String(length=255), nullable=False),
    sa.Column('subdomain_part', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'UNKNOWN', name='subdomainstatus'), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('ip_addresses', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cname', sa.String(length=500), nullable=True),
    sa.Column('mx_records', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('txt_records', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ns_records', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('first_seen', sa.String(length=50), nullable=True),
    sa.Column('last_seen', sa.String(length=50), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('extra_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('passive_recon_result_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['passive_recon_result_id'], ['public.passive_recon_results.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_subdomains_domain', 'subdomains', ['domain'], unique=False, schema='public')
    op.create_index('idx_subdomains_name', 'subdomains', ['name'], unique=False, schema='public')
    op.create_index('idx_subdomains_passive_recon', 'subdomains', ['passive_recon_result_id'], unique=False, schema='public')
    op.create_index('idx_subdomains_status', 'subdomains', ['status'], unique=False, schema='public')
    op.create_index('idx_subdomains_verified', 'subdomains', ['is_verified'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_created_at'), 'subdomains', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_domain'), 'subdomains', ['domain'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_id'), 'subdomains', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_is_verified'), 'subdomains', ['is_verified'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_name'), 'subdomains', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_status'), 'subdomains', ['status'], unique=False, schema='public')
    op.create_index(op.f('ix_public_subdomains_subdomain_part'), 'subdomains', ['subdomain_part'], unique=False, schema='public')
    op.create_table('vulnerability_findings',
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('vuln_type', sa.Enum('SQL_INJECTION', 'XSS', 'CSRF', 'SSRF', 'RCE', 'LFI', 'RFI', 'IDOR', 'BROKEN_AUTH', 'SENSITIVE_DATA_EXPOSURE', 'SECURITY_MISCONFIGURATION', 'INSECURE_DESERIALIZATION', 'COMPONENTS_WITH_KNOWN_VULNERABILITIES', 'INSUFFICIENT_LOGGING', 'OTHER', name='vulnerabilitytype'), nullable=False),
    sa.Column('severity', sa.Enum('CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO', name='vulnerabilityseverity'), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'VERIFIED', 'FALSE_POSITIVE', 'FIXED', 'WONT_FIX', 'DUPLICATE', name='vulnerabilitystatus'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('cve_id', sa.String(length=50), nullable=True),
    sa.Column('cvss_score', sa.Float(), nullable=True),
    sa.Column('cvss_vector', sa.String(length=100), nullable=True),
    sa.Column('affected_host', sa.String(length=255), nullable=True),
    sa.Column('affected_port', sa.Integer(), nullable=True),
    sa.Column('affected_service', sa.String(length=255), nullable=True),
    sa.Column('affected_url', sa.String(length=1000), nullable=True),
    sa.Column('proof_of_concept', sa.Text(), nullable=True),
    sa.Column('remediation', sa.Text(), nullable=True),
    sa.Column('references', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('detection_tool', sa.String(length=255), nullable=True),
    sa.Column('detection_method', sa.String(length=255), nullable=True),
    sa.Column('confidence', sa.String(length=50), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('vulnerability_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['vulnerability_id'], ['public.vulnerabilities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_vulnerability_findings_cve', 'vulnerability_findings', ['cve_id'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_host', 'vulnerability_findings', ['affected_host'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_severity', 'vulnerability_findings', ['severity'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_status', 'vulnerability_findings', ['status'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_title', 'vulnerability_findings', ['title'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_type', 'vulnerability_findings', ['vuln_type'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_verified', 'vulnerability_findings', ['is_verified'], unique=False, schema='public')
    op.create_index('idx_vulnerability_findings_vulnerability', 'vulnerability_findings', ['vulnerability_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_affected_host'), 'vulnerability_findings', ['affected_host'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_created_at'), 'vulnerability_findings', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_cve_id'), 'vulnerability_findings', ['cve_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_id'), 'vulnerability_findings', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_is_verified'), 'vulnerability_findings', ['is_verified'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_severity'), 'vulnerability_findings', ['severity'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_status'), 'vulnerability_findings', ['status'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_title'), 'vulnerability_findings', ['title'], unique=False, schema='public')
    op.create_index(op.f('ix_public_vulnerability_findings_vuln_type'), 'vulnerability_findings', ['vuln_type'], unique=False, schema='public')
    op.create_table('workflow_executions',
    sa.Column('stage', sa.Enum('PASSIVE_RECON', 'ACTIVE_RECON', 'VULN_SCAN', 'VULN_TEST', 'KILL_CHAIN', 'REPORT', name='workflowstage'), nullable=False),
    sa.Column('execution_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'PAUSED', name='workflowstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('progress_percentage', sa.String(length=10), nullable=True),
    sa.Column('current_step', sa.String(length=255), nullable=True),
    sa.Column('workflow_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['public.workflows.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_workflow_executions_execution_id', 'workflow_executions', ['execution_id'], unique=False, schema='public')
    op.create_index('idx_workflow_executions_stage', 'workflow_executions', ['stage'], unique=False, schema='public')
    op.create_index('idx_workflow_executions_status', 'workflow_executions', ['status'], unique=False, schema='public')
    op.create_index('idx_workflow_executions_workflow', 'workflow_executions', ['workflow_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflow_executions_created_at'), 'workflow_executions', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflow_executions_execution_id'), 'workflow_executions', ['execution_id'], unique=True, schema='public')
    op.create_index(op.f('ix_public_workflow_executions_id'), 'workflow_executions', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflow_executions_stage'), 'workflow_executions', ['stage'], unique=False, schema='public')
    op.create_index(op.f('ix_public_workflow_executions_status'), 'workflow_executions', ['status'], unique=False, schema='public')
    op.create_table('services',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('version', sa.String(length=255), nullable=True),
    sa.Column('product', sa.String(length=255), nullable=True),
    sa.Column('extrainfo', sa.String(length=500), nullable=True),
    sa.Column('status', sa.Enum('DETECTED', 'CONFIRMED', 'UNKNOWN', name='servicestatus'), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.Column('banner', sa.Text(), nullable=True),
    sa.Column('fingerprint', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cpe', sa.String(length=500), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('port_id', sa.UUID(), nullable=False),
    sa.Column('active_recon_result_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['active_recon_result_id'], ['public.active_recon_results.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['public.ports.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index('idx_services_active_recon', 'services', ['active_recon_result_id'], unique=False, schema='public')
    op.create_index('idx_services_confirmed', 'services', ['is_confirmed'], unique=False, schema='public')
    op.create_index('idx_services_name', 'services', ['name'], unique=False, schema='public')
    op.create_index('idx_services_port', 'services', ['port_id'], unique=False, schema='public')
    op.create_index('idx_services_product', 'services', ['product'], unique=False, schema='public')
    op.create_index('idx_services_status', 'services', ['status'], unique=False, schema='public')
    op.create_index(op.f('ix_public_services_created_at'), 'services', ['created_at'], unique=False, schema='public')
    op.create_index(op.f('ix_public_services_id'), 'services', ['id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_services_is_confirmed'), 'services', ['is_confirmed'], unique=False, schema='public')
    op.create_index(op.f('ix_public_services_name'), 'services', ['name'], unique=False, schema='public')
    op.create_index(op.f('ix_public_services_status'), 'services', ['status'], unique=False, schema='public')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_public_services_status'), table_name='services', schema='public')
    op.drop_index(op.f('ix_public_services_name'), table_name='services', schema='public')
    op.drop_index(op.f('ix_public_services_is_confirmed'), table_name='services', schema='public')
    op.drop_index(op.f('ix_public_services_id'), table_name='services', schema='public')
    op.drop_index(op.f('ix_public_services_created_at'), table_name='services', schema='public')
    op.drop_index('idx_services_status', table_name='services', schema='public')
    op.drop_index('idx_services_product', table_name='services', schema='public')
    op.drop_index('idx_services_port', table_name='services', schema='public')
    op.drop_index('idx_services_name', table_name='services', schema='public')
    op.drop_index('idx_services_confirmed', table_name='services', schema='public')
    op.drop_index('idx_services_active_recon', table_name='services', schema='public')
    op.drop_table('services', schema='public')
    op.drop_index(op.f('ix_public_workflow_executions_status'), table_name='workflow_executions', schema='public')
    op.drop_index(op.f('ix_public_workflow_executions_stage'), table_name='workflow_executions', schema='public')
    op.drop_index(op.f('ix_public_workflow_executions_id'), table_name='workflow_executions', schema='public')
    op.drop_index(op.f('ix_public_workflow_executions_execution_id'), table_name='workflow_executions', schema='public')
    op.drop_index(op.f('ix_public_workflow_executions_created_at'), table_name='workflow_executions', schema='public')
    op.drop_index('idx_workflow_executions_workflow', table_name='workflow_executions', schema='public')
    op.drop_index('idx_workflow_executions_status', table_name='workflow_executions', schema='public')
    op.drop_index('idx_workflow_executions_stage', table_name='workflow_executions', schema='public')
    op.drop_index('idx_workflow_executions_execution_id', table_name='workflow_executions', schema='public')
    op.drop_table('workflow_executions', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_vuln_type'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_title'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_status'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_severity'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_is_verified'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_id'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_cve_id'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_created_at'), table_name='vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_vulnerability_findings_affected_host'), table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_vulnerability', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_verified', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_type', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_title', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_status', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_severity', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_host', table_name='vulnerability_findings', schema='public')
    op.drop_index('idx_vulnerability_findings_cve', table_name='vulnerability_findings', schema='public')
    op.drop_table('vulnerability_findings', schema='public')
    op.drop_index(op.f('ix_public_subdomains_subdomain_part'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_status'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_name'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_is_verified'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_id'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_domain'), table_name='subdomains', schema='public')
    op.drop_index(op.f('ix_public_subdomains_created_at'), table_name='subdomains', schema='public')
    op.drop_index('idx_subdomains_verified', table_name='subdomains', schema='public')
    op.drop_index('idx_subdomains_status', table_name='subdomains', schema='public')
    op.drop_index('idx_subdomains_passive_recon', table_name='subdomains', schema='public')
    op.drop_index('idx_subdomains_name', table_name='subdomains', schema='public')
    op.drop_index('idx_subdomains_domain', table_name='subdomains', schema='public')
    op.drop_table('subdomains', schema='public')
    op.drop_index(op.f('ix_public_reports_workflow_id'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_status'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_report_type'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_name'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_is_public'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_id'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_format'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_created_at'), table_name='reports', schema='public')
    op.drop_index(op.f('ix_public_reports_access_token'), table_name='reports', schema='public')
    op.drop_index('idx_reports_workflow', table_name='reports', schema='public')
    op.drop_index('idx_reports_user', table_name='reports', schema='public')
    op.drop_index('idx_reports_type', table_name='reports', schema='public')
    op.drop_index('idx_reports_target', table_name='reports', schema='public')
    op.drop_index('idx_reports_status', table_name='reports', schema='public')
    op.drop_index('idx_reports_name', table_name='reports', schema='public')
    op.drop_index('idx_reports_format', table_name='reports', schema='public')
    op.drop_index('idx_reports_created', table_name='reports', schema='public')
    op.drop_table('reports', schema='public')
    op.drop_index(op.f('ix_public_ports_status'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_service_name'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_protocol'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_port_number'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_is_open'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_id'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_host'), table_name='ports', schema='public')
    op.drop_index(op.f('ix_public_ports_created_at'), table_name='ports', schema='public')
    op.drop_index('idx_ports_status', table_name='ports', schema='public')
    op.drop_index('idx_ports_service', table_name='ports', schema='public')
    op.drop_index('idx_ports_protocol', table_name='ports', schema='public')
    op.drop_index('idx_ports_open', table_name='ports', schema='public')
    op.drop_index('idx_ports_number', table_name='ports', schema='public')
    op.drop_index('idx_ports_host_port', table_name='ports', schema='public')
    op.drop_index('idx_ports_host', table_name='ports', schema='public')
    op.drop_index('idx_ports_active_recon', table_name='ports', schema='public')
    op.drop_table('ports', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_status'), table_name='attack_paths', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_name'), table_name='attack_paths', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_is_verified'), table_name='attack_paths', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_is_exploitable'), table_name='attack_paths', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_id'), table_name='attack_paths', schema='public')
    op.drop_index(op.f('ix_public_attack_paths_created_at'), table_name='attack_paths', schema='public')
    op.drop_index('idx_attack_paths_verified', table_name='attack_paths', schema='public')
    op.drop_index('idx_attack_paths_status', table_name='attack_paths', schema='public')
    op.drop_index('idx_attack_paths_name', table_name='attack_paths', schema='public')
    op.drop_index('idx_attack_paths_kill_chain', table_name='attack_paths', schema='public')
    op.drop_index('idx_attack_paths_exploitable', table_name='attack_paths', schema='public')
    op.drop_table('attack_paths', schema='public')
    op.drop_index(op.f('ix_public_workflows_status'), table_name='workflows', schema='public')
    op.drop_index(op.f('ix_public_workflows_name'), table_name='workflows', schema='public')
    op.drop_index(op.f('ix_public_workflows_id'), table_name='workflows', schema='public')
    op.drop_index(op.f('ix_public_workflows_created_at'), table_name='workflows', schema='public')
    op.drop_index('idx_workflows_user', table_name='workflows', schema='public')
    op.drop_index('idx_workflows_target', table_name='workflows', schema='public')
    op.drop_index('idx_workflows_status', table_name='workflows', schema='public')
    op.drop_index('idx_workflows_current_stage', table_name='workflows', schema='public')
    op.drop_table('workflows', schema='public')
    op.drop_index(op.f('ix_public_vulnerabilities_id'), table_name='vulnerabilities', schema='public')
    op.drop_index(op.f('ix_public_vulnerabilities_execution_id'), table_name='vulnerabilities', schema='public')
    op.drop_index(op.f('ix_public_vulnerabilities_created_at'), table_name='vulnerabilities', schema='public')
    op.drop_index('idx_vulnerabilities_target', table_name='vulnerabilities', schema='public')
    op.drop_index('idx_vulnerabilities_execution', table_name='vulnerabilities', schema='public')
    op.drop_index('idx_vulnerabilities_created', table_name='vulnerabilities', schema='public')
    op.drop_table('vulnerabilities', schema='public')
    op.drop_index(op.f('ix_public_passive_recon_results_id'), table_name='passive_recon_results', schema='public')
    op.drop_index(op.f('ix_public_passive_recon_results_execution_id'), table_name='passive_recon_results', schema='public')
    op.drop_index(op.f('ix_public_passive_recon_results_created_at'), table_name='passive_recon_results', schema='public')
    op.drop_index('idx_passive_recon_target', table_name='passive_recon_results', schema='public')
    op.drop_index('idx_passive_recon_execution', table_name='passive_recon_results', schema='public')
    op.drop_index('idx_passive_recon_created', table_name='passive_recon_results', schema='public')
    op.drop_table('passive_recon_results', schema='public')
    op.drop_index(op.f('ix_public_kill_chains_id'), table_name='kill_chains', schema='public')
    op.drop_index(op.f('ix_public_kill_chains_execution_id'), table_name='kill_chains', schema='public')
    op.drop_index(op.f('ix_public_kill_chains_created_at'), table_name='kill_chains', schema='public')
    op.drop_index('idx_kill_chains_target', table_name='kill_chains', schema='public')
    op.drop_index('idx_kill_chains_execution', table_name='kill_chains', schema='public')
    op.drop_index('idx_kill_chains_created', table_name='kill_chains', schema='public')
    op.drop_table('kill_chains', schema='public')
    op.drop_index(op.f('ix_public_active_recon_results_id'), table_name='active_recon_results', schema='public')
    op.drop_index(op.f('ix_public_active_recon_results_execution_id'), table_name='active_recon_results', schema='public')
    op.drop_index(op.f('ix_public_active_recon_results_created_at'), table_name='active_recon_results', schema='public')
    op.drop_index('idx_active_recon_target', table_name='active_recon_results', schema='public')
    op.drop_index('idx_active_recon_execution', table_name='active_recon_results', schema='public')
    op.drop_index('idx_active_recon_created', table_name='active_recon_results', schema='public')
    op.drop_table('active_recon_results', schema='public')
    op.drop_index(op.f('ix_public_targets_value'), table_name='targets', schema='public')
    op.drop_index(op.f('ix_public_targets_program_name'), table_name='targets', schema='public')
    op.drop_index(op.f('ix_public_targets_name'), table_name='targets', schema='public')
    op.drop_index(op.f('ix_public_targets_is_primary'), table_name='targets', schema='public')
    op.drop_index(op.f('ix_public_targets_id'), table_name='targets', schema='public')
    op.drop_index(op.f('ix_public_targets_created_at'), table_name='targets', schema='public')
    op.drop_index('idx_targets_user', table_name='targets', schema='public')
    op.drop_index('idx_targets_status', table_name='targets', schema='public')
    op.drop_index('idx_targets_scope_value', table_name='targets', schema='public')
    op.drop_table('targets', schema='public')
    op.drop_index(op.f('ix_public_users_name'), table_name='users', schema='public')
    op.drop_index(op.f('ix_public_users_is_active'), table_name='users', schema='public')
    op.drop_index(op.f('ix_public_users_id'), table_name='users', schema='public')
    op.drop_index(op.f('ix_public_users_email'), table_name='users', schema='public')
    op.drop_index(op.f('ix_public_users_created_at'), table_name='users', schema='public')
    op.drop_index('idx_users_platform', table_name='users', schema='public')
    op.drop_index('idx_users_email', table_name='users', schema='public')
    op.drop_index('idx_users_active', table_name='users', schema='public')
    op.drop_table('users', schema='public')
    # ### end Alembic commands ###
