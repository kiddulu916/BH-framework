"""Add missing passive_recon column to Target model

Revision ID: db77739f9772
Revises: b99c9106da21
Create Date: 2025-06-30 11:50:09.764292

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'db77739f9772'
down_revision: Union[str, Sequence[str], None] = 'b99c9106da21'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('active_recon_results', 'execution_time',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Float(),
               existing_nullable=True,
               postgresql_using='execution_time::double precision')
    op.drop_constraint(op.f('active_recon_results_target_id_fkey'), 'active_recon_results', type_='foreignkey')
    op.create_foreign_key(None, 'active_recon_results', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    op.add_column('attack_paths', sa.Column('attack_path_type', sa.String(length=100), nullable=True))
    op.add_column('attack_paths', sa.Column('severity', sa.String(length=50), nullable=True))
    op.add_column('attack_paths', sa.Column('stages', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('attack_paths', sa.Column('prerequisites', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('attack_paths', sa.Column('tools_required', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('attack_paths', sa.Column('evidence', sa.Text(), nullable=True))
    op.add_column('attack_paths', sa.Column('proof_of_concept', sa.Text(), nullable=True))
    op.add_column('attack_paths', sa.Column('screenshots', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('attack_paths', sa.Column('impact_assessment', sa.Text(), nullable=True))
    op.add_column('attack_paths', sa.Column('remediation', sa.Text(), nullable=True))
    op.add_column('attack_paths', sa.Column('attack_path_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_constraint(op.f('attack_paths_kill_chain_id_fkey'), 'attack_paths', type_='foreignkey')
    op.create_foreign_key(None, 'attack_paths', 'kill_chains', ['kill_chain_id'], ['id'], source_schema='public', referent_schema='public')
    op.add_column('kill_chains', sa.Column('critical_paths', sa.Integer(), nullable=False))
    op.add_column('kill_chains', sa.Column('high_paths', sa.Integer(), nullable=False))
    op.add_column('kill_chains', sa.Column('medium_paths', sa.Integer(), nullable=False))
    op.add_column('kill_chains', sa.Column('low_paths', sa.Integer(), nullable=False))
    op.add_column('kill_chains', sa.Column('info_paths', sa.Integer(), nullable=False))
    op.add_column('kill_chains', sa.Column('analysis_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('kill_chains', sa.Column('raw_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('kill_chains', sa.Column('kill_chain_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('kill_chains', 'execution_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('kill_chains', 'execution_time',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Float(),
               existing_nullable=True,
               postgresql_using='execution_time::double precision')
    op.drop_constraint(op.f('kill_chains_target_id_fkey'), 'kill_chains', type_='foreignkey')
    op.create_foreign_key(None, 'kill_chains', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    op.add_column('passive_recon_results', sa.Column('extra_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_constraint(op.f('passive_recon_results_target_id_fkey'), 'passive_recon_results', type_='foreignkey')
    op.create_foreign_key(None, 'passive_recon_results', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('ports_active_recon_result_id_fkey'), 'ports', type_='foreignkey')
    op.create_foreign_key(None, 'ports', 'active_recon_results', ['active_recon_result_id'], ['id'], source_schema='public', referent_schema='public')
    op.add_column('reports', sa.Column('workflow_id', sa.UUID(), nullable=False))
    op.create_index('idx_reports_workflow', 'reports', ['workflow_id'], unique=False, schema='public')
    op.create_index(op.f('ix_public_reports_workflow_id'), 'reports', ['workflow_id'], unique=False, schema='public')
    op.drop_constraint(op.f('reports_target_id_fkey'), 'reports', type_='foreignkey')
    op.drop_constraint(op.f('reports_user_id_fkey'), 'reports', type_='foreignkey')
    op.create_foreign_key(None, 'reports', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'reports', 'workflows', ['workflow_id'], ['id'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'reports', 'users', ['user_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('services_port_id_fkey'), 'services', type_='foreignkey')
    op.drop_constraint(op.f('services_active_recon_result_id_fkey'), 'services', type_='foreignkey')
    op.create_foreign_key(None, 'services', 'ports', ['port_id'], ['id'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'services', 'active_recon_results', ['active_recon_result_id'], ['id'], source_schema='public', referent_schema='public')
    op.add_column('subdomains', sa.Column('extra_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_constraint(op.f('subdomains_passive_recon_result_id_fkey'), 'subdomains', type_='foreignkey')
    op.create_foreign_key(None, 'subdomains', 'passive_recon_results', ['passive_recon_result_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('targets_user_id_fkey'), 'targets', type_='foreignkey')
    op.create_foreign_key(None, 'targets', 'users', ['user_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('vulnerabilities_target_id_fkey'), 'vulnerabilities', type_='foreignkey')
    op.create_foreign_key(None, 'vulnerabilities', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('vulnerability_findings_vulnerability_id_fkey'), 'vulnerability_findings', type_='foreignkey')
    op.create_foreign_key(None, 'vulnerability_findings', 'vulnerabilities', ['vulnerability_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('workflow_executions_workflow_id_fkey'), 'workflow_executions', type_='foreignkey')
    op.create_foreign_key(None, 'workflow_executions', 'workflows', ['workflow_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('workflows_target_id_fkey'), 'workflows', type_='foreignkey')
    op.drop_constraint(op.f('workflows_user_id_fkey'), 'workflows', type_='foreignkey')
    op.create_foreign_key(None, 'workflows', 'users', ['user_id'], ['id'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'workflows', 'targets', ['target_id'], ['id'], source_schema='public', referent_schema='public')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'workflows', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'workflows', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('workflows_user_id_fkey'), 'workflows', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('workflows_target_id_fkey'), 'workflows', 'targets', ['target_id'], ['id'])
    op.drop_constraint(None, 'workflow_executions', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('workflow_executions_workflow_id_fkey'), 'workflow_executions', 'workflows', ['workflow_id'], ['id'])
    op.drop_constraint(None, 'vulnerability_findings', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('vulnerability_findings_vulnerability_id_fkey'), 'vulnerability_findings', 'vulnerabilities', ['vulnerability_id'], ['id'])
    op.drop_constraint(None, 'vulnerabilities', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('vulnerabilities_target_id_fkey'), 'vulnerabilities', 'targets', ['target_id'], ['id'])
    op.drop_constraint(None, 'targets', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('targets_user_id_fkey'), 'targets', 'users', ['user_id'], ['id'])
    op.drop_constraint(None, 'subdomains', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('subdomains_passive_recon_result_id_fkey'), 'subdomains', 'passive_recon_results', ['passive_recon_result_id'], ['id'])
    op.drop_column('subdomains', 'extra_metadata')
    op.drop_constraint(None, 'services', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'services', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('services_active_recon_result_id_fkey'), 'services', 'active_recon_results', ['active_recon_result_id'], ['id'])
    op.create_foreign_key(op.f('services_port_id_fkey'), 'services', 'ports', ['port_id'], ['id'])
    op.drop_constraint(None, 'reports', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'reports', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'reports', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('reports_user_id_fkey'), 'reports', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('reports_target_id_fkey'), 'reports', 'targets', ['target_id'], ['id'])
    op.drop_index(op.f('ix_public_reports_workflow_id'), table_name='reports', schema='public')
    op.drop_index('idx_reports_workflow', table_name='reports', schema='public')
    op.drop_column('reports', 'workflow_id')
    op.drop_constraint(None, 'ports', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('ports_active_recon_result_id_fkey'), 'ports', 'active_recon_results', ['active_recon_result_id'], ['id'])
    op.drop_constraint(None, 'passive_recon_results', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('passive_recon_results_target_id_fkey'), 'passive_recon_results', 'targets', ['target_id'], ['id'])
    op.drop_column('passive_recon_results', 'extra_metadata')
    op.drop_constraint(None, 'kill_chains', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('kill_chains_target_id_fkey'), 'kill_chains', 'targets', ['target_id'], ['id'])
    op.alter_column('kill_chains', 'execution_time',
               existing_type=sa.Float(),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('kill_chains', 'execution_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.drop_column('kill_chains', 'kill_chain_metadata')
    op.drop_column('kill_chains', 'raw_output')
    op.drop_column('kill_chains', 'analysis_config')
    op.drop_column('kill_chains', 'info_paths')
    op.drop_column('kill_chains', 'low_paths')
    op.drop_column('kill_chains', 'medium_paths')
    op.drop_column('kill_chains', 'high_paths')
    op.drop_column('kill_chains', 'critical_paths')
    op.drop_constraint(None, 'attack_paths', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('attack_paths_kill_chain_id_fkey'), 'attack_paths', 'kill_chains', ['kill_chain_id'], ['id'])
    op.drop_column('attack_paths', 'attack_path_metadata')
    op.drop_column('attack_paths', 'remediation')
    op.drop_column('attack_paths', 'impact_assessment')
    op.drop_column('attack_paths', 'screenshots')
    op.drop_column('attack_paths', 'proof_of_concept')
    op.drop_column('attack_paths', 'evidence')
    op.drop_column('attack_paths', 'tools_required')
    op.drop_column('attack_paths', 'prerequisites')
    op.drop_column('attack_paths', 'stages')
    op.drop_column('attack_paths', 'severity')
    op.drop_column('attack_paths', 'attack_path_type')
    op.drop_constraint(None, 'active_recon_results', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('active_recon_results_target_id_fkey'), 'active_recon_results', 'targets', ['target_id'], ['id'])
    op.alter_column('active_recon_results', 'execution_time',
               existing_type=sa.Float(),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    # ### end Alembic commands ###
