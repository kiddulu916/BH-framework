"""
Vulnerability schemas for the Bug Hunting Framework.

This module contains Pydantic schemas for vulnerability findings,
severity levels, verification status, and related data structures.
"""

from datetime import datetime
from typing import Optional, List, Dict, Any
from uuid import UUID
from enum import Enum

from pydantic import BaseModel, Field, field_validator, HttpUrl, ConfigDict

from .base import APIResponse


class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity enumeration."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class VulnerabilityStatus(str, Enum):
    """Vulnerability status enumeration."""
    OPEN = "open"
    VERIFIED = "verified"
    FALSE_POSITIVE = "false_positive"
    FIXED = "fixed"
    ACCEPTED = "accepted"
    DUPLICATE = "duplicate"


class VulnerabilityType(str, Enum):
    """Vulnerability type enumeration."""
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    CSRF = "csrf"
    SSRF = "ssrf"
    RCE = "rce"
    LFI = "lfi"
    RFI = "rfi"
    IDOR = "idor"
    BROKEN_AUTH = "broken_auth"
    SENSITIVE_DATA_EXPOSURE = "sensitive_data_exposure"
    MISSING_SECURITY_HEADERS = "missing_security_headers"
    WEAK_CRYPTOGRAPHY = "weak_cryptography"
    INSECURE_DESERIALIZATION = "insecure_deserialization"
    XXE = "xxe"
    OPEN_REDIRECT = "open_redirect"
    OTHER = "other"


class VulnerabilityTool(str, Enum):
    """Vulnerability scanning tools enumeration."""
    NUCLEI = "nuclei"
    SQLMAP = "sqlmap"
    FFUF = "ffuf"
    GOBUSTER = "gobuster"
    DIRB = "dirb"
    NIKTO = "nikto"
    WPSCAN = "wpscan"
    JOOMSCAN = "joomscan"
    DRUPALSCAN = "drupalscan"
    CUSTOM = "custom"


class VulnerabilityFindingCreate(BaseModel):
    """Schema for creating a vulnerability finding."""
    
    target_id: UUID = Field(..., description="Target ID")
    vulnerability_id: Optional[UUID] = Field(None, description="Parent vulnerability ID")
    title: str = Field(..., min_length=1, max_length=255, description="Finding title")
    description: str = Field(..., description="Finding description")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    status: VulnerabilityStatus = Field(default=VulnerabilityStatus.OPEN, description="Finding status")
    vulnerability_type: VulnerabilityType = Field(..., description="Vulnerability type")
    tool: VulnerabilityTool = Field(..., description="Tool that discovered this finding")
    host: str = Field(..., description="Affected host")
    port: Optional[int] = Field(None, ge=1, le=65535, description="Affected port")
    url: Optional[str] = Field(None, description="Affected URL")
    parameter: Optional[str] = Field(None, description="Affected parameter")
    payload: Optional[str] = Field(None, description="Proof of concept payload")
    evidence: Optional[str] = Field(None, description="Evidence of the vulnerability")
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cvss_score: Optional[float] = Field(None, ge=0, le=10, description="CVSS score")
    cvss_vector: Optional[str] = Field(None, description="CVSS vector")
    references: Optional[List[str]] = Field(default_factory=list, description="Reference links")
    tags: Optional[List[str]] = Field(default_factory=list, description="Finding tags")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional metadata")
    
    @field_validator('host')
    def validate_host(cls, v):
        """Validate host format."""
        import ipaddress
        try:
            ipaddress.ip_address(v)
        except ValueError:
            # If not a valid IP, check if it's a valid domain
            if not v or '.' not in v:
                raise ValueError("Host must be a valid IP address or domain")
        return v
    
    @field_validator('url')
    def validate_url(cls, v):
        """Validate URL format."""
        if v and not v.startswith(('http://', 'https://')):
            raise ValueError("URL must start with http:// or https://")
        return v
    
    @field_validator('cve_id')
    def validate_cve_id(cls, v):
        """Validate CVE ID format."""
        if v and not v.upper().startswith('CVE-'):
            raise ValueError("CVE ID must start with 'CVE-'")
        return v.upper() if v else v


class VulnerabilityFindingResponse(BaseModel):
    """Schema for vulnerability finding response."""
    
    id: UUID = Field(..., description="Finding ID")
    target_id: UUID = Field(..., description="Target ID")
    vulnerability_id: Optional[UUID] = Field(None, description="Parent vulnerability ID")
    title: str = Field(..., description="Finding title")
    description: str = Field(..., description="Finding description")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    status: VulnerabilityStatus = Field(..., description="Finding status")
    vulnerability_type: VulnerabilityType = Field(..., description="Vulnerability type")
    tool: VulnerabilityTool = Field(..., description="Tool that discovered this finding")
    host: str = Field(..., description="Affected host")
    port: Optional[int] = Field(None, description="Affected port")
    url: Optional[str] = Field(None, description="Affected URL")
    parameter: Optional[str] = Field(None, description="Affected parameter")
    payload: Optional[str] = Field(None, description="Proof of concept payload")
    evidence: Optional[str] = Field(None, description="Evidence of the vulnerability")
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cvss_score: Optional[float] = Field(None, description="CVSS score")
    cvss_vector: Optional[str] = Field(None, description="CVSS vector")
    references: List[str] = Field(default_factory=list, description="Reference links")
    tags: List[str] = Field(default_factory=list, description="Finding tags")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    model_config = ConfigDict(from_attributes=True)


class VulnerabilityFindingListResponse(BaseModel):
    """Schema for vulnerability finding list response."""
    
    findings: List[VulnerabilityFindingResponse] = Field(..., description="List of findings")
    total: int = Field(..., description="Total number of findings")
    page: int = Field(..., description="Current page number")
    per_page: int = Field(..., description="Items per page")


class VulnerabilityCreate(BaseModel):
    """Schema for creating a vulnerability record."""
    
    target_id: UUID = Field(..., description="Target ID")
    execution_id: Optional[UUID] = Field(None, description="Workflow execution ID")
    tools_used: List[VulnerabilityTool] = Field(..., description="Tools used in scanning")
    findings: List[VulnerabilityFindingCreate] = Field(default_factory=list, description="Vulnerability findings")
    total_findings: int = Field(default=0, ge=0, description="Total number of findings")
    critical_count: int = Field(default=0, ge=0, description="Number of critical findings")
    high_count: int = Field(default=0, ge=0, description="Number of high severity findings")
    medium_count: int = Field(default=0, ge=0, description="Number of medium severity findings")
    low_count: int = Field(default=0, ge=0, description="Number of low severity findings")
    info_count: int = Field(default=0, ge=0, description="Number of info findings")
    execution_time: Optional[float] = Field(None, ge=0, description="Execution time in seconds")
    scan_config: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Scan configuration")
    raw_output: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Raw tool outputs")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional metadata")
    
    @field_validator('total_findings')
    def validate_total_findings(cls, v, info):
        findings = info.data.get('findings')
        if findings is not None and v != len(findings):
            raise ValueError("total_findings must match the actual number of findings")
        return v


class VulnerabilityResponse(BaseModel):
    """Schema for vulnerability response."""
    
    id: UUID = Field(..., description="Vulnerability ID")
    target_id: UUID = Field(..., description="Target ID")
    execution_id: Optional[UUID] = Field(None, description="Workflow execution ID")
    tools_used: List[VulnerabilityTool] = Field(..., description="Tools used in scanning")
    findings: List[VulnerabilityFindingResponse] = Field(..., description="Vulnerability findings")
    total_findings: int = Field(..., description="Total number of findings")
    critical_count: int = Field(..., description="Number of critical findings")
    high_count: int = Field(..., description="Number of high severity findings")
    medium_count: int = Field(..., description="Number of medium severity findings")
    low_count: int = Field(..., description="Number of low severity findings")
    info_count: int = Field(..., description="Number of info findings")
    execution_time: Optional[float] = Field(None, description="Execution time in seconds")
    scan_config: Dict[str, Any] = Field(default_factory=dict, description="Scan configuration")
    raw_output: Dict[str, Any] = Field(default_factory=dict, description="Raw tool outputs")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    model_config = ConfigDict(from_attributes=True)


class VulnerabilitySummary(BaseModel):
    """Schema for vulnerability summary."""
    
    target_id: UUID = Field(..., description="Target ID")
    total_findings: int = Field(..., description="Total findings")
    critical_count: int = Field(..., description="Critical findings count")
    high_count: int = Field(..., description="High severity findings count")
    medium_count: int = Field(..., description="Medium severity findings count")
    low_count: int = Field(..., description="Low severity findings count")
    info_count: int = Field(..., description="Info findings count")
    verified_count: int = Field(..., description="Verified findings count")
    false_positive_count: int = Field(..., description="False positive count")
    tools_used: List[VulnerabilityTool] = Field(..., description="Tools used")
    last_execution: Optional[datetime] = Field(None, description="Last execution timestamp")
    execution_count: int = Field(default=0, description="Number of executions")


class VulnerabilityFilter(BaseModel):
    """Schema for filtering vulnerability results."""
    
    target_id: Optional[UUID] = Field(None, description="Filter by target ID")
    severity: Optional[VulnerabilitySeverity] = Field(None, description="Filter by severity")
    status: Optional[VulnerabilityStatus] = Field(None, description="Filter by status")
    vulnerability_type: Optional[VulnerabilityType] = Field(None, description="Filter by vulnerability type")
    tool: Optional[VulnerabilityTool] = Field(None, description="Filter by tool")
    host: Optional[str] = Field(None, description="Filter by host")
    port: Optional[int] = Field(None, ge=1, le=65535, description="Filter by port")
    cve_id: Optional[str] = Field(None, description="Filter by CVE ID")
    created_after: Optional[datetime] = Field(None, description="Filter by creation date (after)")
    created_before: Optional[datetime] = Field(None, description="Filter by creation date (before)")


# API Response schemas
class VulnerabilityCreateResponse(APIResponse):
    """Response schema for vulnerability creation."""
    data: Optional[VulnerabilityResponse] = Field(None, description="Created vulnerability")


class VulnerabilityGetResponse(APIResponse):
    """Response schema for vulnerability retrieval."""
    data: Optional[VulnerabilityResponse] = Field(None, description="Vulnerability details")


class VulnerabilityListResponse(APIResponse):
    """Response schema for vulnerability list."""
    data: Optional[List[VulnerabilityResponse]] = Field(None, description="List of vulnerabilities")


class VulnerabilityFindingCreateResponse(APIResponse):
    """Response schema for vulnerability finding creation."""
    data: Optional[VulnerabilityFindingResponse] = Field(None, description="Created finding")


class VulnerabilityFindingGetResponse(APIResponse):
    """Response schema for vulnerability finding retrieval."""
    data: Optional[VulnerabilityFindingResponse] = Field(None, description="Finding details")


class VulnerabilityFindingListAPIResponse(APIResponse):
    """Response schema for vulnerability finding list."""
    data: Optional[VulnerabilityFindingListResponse] = Field(None, description="List of findings")


class VulnerabilitySummaryResponse(APIResponse):
    """Response schema for vulnerability summary."""
    data: Optional[VulnerabilitySummary] = Field(None, description="Vulnerability summary") 