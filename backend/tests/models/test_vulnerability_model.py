import pytest
from uuid import uuid4
from datetime import datetime, timezone
from core.models.vulnerability import (
    Vulnerability, VulnerabilityFinding, VulnerabilitySeverity, VulnerabilityStatus, VulnerabilityType
)

class TestVulnerabilityModel:
    def test_vulnerability_creation(self):
        vuln = Vulnerability(
            id=uuid4(),
            execution_id="exec-202",
            scan_type="nuclei",
            tools_used=[{"name": "nuclei", "version": "3.0.0"}],
            configuration={"template": "cves"},
            scan_targets=["host1.example.com"],
            total_findings=2,
            critical_findings=1,
            high_findings=1,
            medium_findings=0,
            low_findings=0,
            info_findings=0,
            raw_output={"nuclei": "output"},
            processed_data={"findings": ["CVE-2024-0001"]},
            execution_time="15.0",
            errors=None,
            target_id=uuid4(),
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        assert vuln.execution_id == "exec-202"
        assert vuln.total_findings == 2
        assert vuln.critical_findings == 1
        assert isinstance(vuln.tools_used, list)
        assert vuln.scan_type == "nuclei"

    def test_vulnerability_to_dict(self):
        vuln = Vulnerability(
            id=uuid4(),
            execution_id="exec-303",
            tools_used=[{"name": "sqlmap", "version": "1.5.0"}],
            total_findings=1,
            critical_findings=0,
            high_findings=1,
            medium_findings=0,
            low_findings=0,
            info_findings=0,
            raw_output={"sqlmap": "output"},
            processed_data={"findings": ["SQLi"]},
            execution_time="7.0",
            target_id=uuid4(),
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        d = vuln.to_dict()
        assert d["execution_id"] == "exec-303"
        assert d["total_findings"] == 1
        assert "created_at" in d
        assert "id" in d

class TestVulnerabilityFindingModel:
    def test_vulnerability_finding_creation(self):
        finding = VulnerabilityFinding(
            id=uuid4(),
            title="SQL Injection",
            vuln_type=VulnerabilityType.SQL_INJECTION,
            severity=VulnerabilitySeverity.CRITICAL,
            status=VulnerabilityStatus.OPEN,
            description="SQLi in login form",
            cve_id="CVE-2024-0001",
            cvss_score=9.8,
            cvss_vector="AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            affected_host="host1.example.com",
            affected_port=80,
            affected_service="http",
            affected_url="http://host1.example.com/login",
            proof_of_concept="' OR 1=1--",
            remediation="Use parameterized queries",
            references=["https://cve.mitre.org"],
            detection_tool="sqlmap",
            detection_method="automated",
            confidence="high",
            is_verified=True,
            verification_notes="Verified manually",
            tags=["critical"],
            notes="test finding",
            vulnerability_id=uuid4(),
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        assert finding.title == "SQL Injection"
        assert finding.vuln_type == VulnerabilityType.SQL_INJECTION
        assert finding.severity == VulnerabilitySeverity.CRITICAL
        assert finding.status == VulnerabilityStatus.OPEN
        assert finding.is_verified is True
        assert finding.affected_url == "http://host1.example.com/login"

    def test_vulnerability_finding_to_dict(self):
        finding = VulnerabilityFinding(
            id=uuid4(),
            title="XSS",
            vuln_type=VulnerabilityType.XSS,
            severity=VulnerabilitySeverity.MEDIUM,
            status=VulnerabilityStatus.VERIFIED,
            is_verified=False,
            vulnerability_id=uuid4(),
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        d = finding.to_dict()
        assert d["title"] == "XSS"
        assert d["severity"] == VulnerabilitySeverity.MEDIUM.value
        assert d["status"] == VulnerabilityStatus.VERIFIED.value
        assert "created_at" in d
        assert "id" in d 