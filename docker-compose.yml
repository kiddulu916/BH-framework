# Bug Hunting Framework - Docker Compose Configuration
# Development Environment

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: bug-hunting-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bug-hunting-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: '3'

  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bug-hunting-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - METRICS_PORT=${METRICS_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./backend/.env:/app/backend/.env
      - ./backend/utils:/app/utils
      - ./.env:/app/.env
      - backend_logs:/app/backend/logs
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

# =============================================================================
# FRONTEND SERVICE
# =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bug-hunting-frontend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - KEEP_ALIVE_TIMEOUT=60000
      - BACKEND_URL=${BACKEND_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
      - INTERNAL_BACKEND_URL=${INTERNAL_BACKEND_URL}
      - INTERNAL_API_URL=${INTERNAL_API_URL}
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PRIVATE_DISABLE_LIGHTNINGCSS=1
    volumes:
      - ./frontend:/app/frontend
      - ./frontend/.env:/app/frontend/.env
      - ./.env:/app/.env
      - frontend_logs:/app/frontend/logs
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3000:3000"
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

# =============================================================================
# JWT ROTATOR SERVICE
# =============================================================================
  jwt_rotator:
    build:
      context: .
      dockerfile: scripts/Dockerfile
    container_name: bug-hunting-jwt-rotator
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./backend/.env:/app/backend/.env
      - ./stages:/app/stages
      - ./backend/utils:/app/utils
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

# =============================================================================
# STAGE SERVICES (ON-DEMAND)
# PASSIVE RECON STAGE
# =============================================================================
  passive_recon:
    profiles:
      - stages
    build:
      context: ./stages/passive_recon
      dockerfile: Dockerfile
    container_name: bug-hunting-passive-recon
    ports:
      - "8001:8001"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${PASSIVE_RECON_TIMEOUT:-3600}
      - PYTHONPATH=/app
    volumes:
      - ./stages/passive_recon:/app/stages/passive_recon
      - ./stages/passive_recon/.env:/app/stages/passive_recon/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'

# =============================================================================
# ACTIVE RECON STAGE
# =============================================================================
  active_recon:
    profiles:
      - stages
    build:
      context: ./stages/active_recon
      dockerfile: Dockerfile
    container_name: bug-hunting-active-recon
    ports:
      - "8002:8002"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      passive_recon:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${ACTIVE_RECON_TIMEOUT:-3600}
      - PYTHONPATH=/app
    volumes:
      - ./stages/active_recon:/app/stages/active_recon
      - ./stages/active_recon/.env:/app/stages/active_recon/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'

# =============================================================================
# VULNERABILITY SCANNING STAGE
# =============================================================================
  vuln_scan:
    profiles:
      - stages
    build:
      context: ./stages/vuln_scan
      dockerfile: Dockerfile
    container_name: bug-hunting-vuln-scan
    ports:
      - "8003:8003"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      active_recon:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${VULN_SCAN_TIMEOUT:-1800}
      - PYTHONPATH=/app
      - TARGET=${TARGET}
      - STAGE_NAME=vuln_scan
    volumes:
      - ./stages/vuln_scan:/app/stages/vuln_scan
      - ./stages/vuln_scan/.env:/app/stages/vuln_scan/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'

# =============================================================================
# VULNERABILITY TESTING STAGE
# =============================================================================
  vuln_test:
    profiles:
      - stages
    build:
      context: ./stages/vuln_test
      dockerfile: Dockerfile
    container_name: bug-hunting-vuln-test
    ports:
      - "8004:8004"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      vuln_scan:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${VULN_TEST_TIMEOUT:-2400}
      - PYTHONPATH=/app
      - TARGET=${TARGET}
      - STAGE_NAME=vuln_test
    volumes:
      - ./stages/vuln_test:/app/stages/vuln_test
      - ./stages/vuln_test/.env:/app/stages/vuln_test/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'

# =============================================================================
# KILL CHAIN ANALYSIS STAGE
# =============================================================================
  kill_chain:
    profiles:
      - stages
    build:
      context: ./stages/kill_chain
      dockerfile: Dockerfile
    container_name: bug-hunting-kill-chain
    ports:
      - "8005:8005"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      vuln_test:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${KILL_CHAIN_TIMEOUT}
      - PYTHONPATH=/app
    volumes:
      - ./stages/kill_chain:/app/stages/kill_chain
      - ./stages/kill_chain/.env:/app/stages/kill_chain/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'

# =============================================================================
# COMPREHENSIVE REPORTING STAGE
# =============================================================================
  comprehensive_reporting:
    profiles:
      - stages
    build:
      context: ./stages/reporting
      dockerfile: Dockerfile
    container_name: bug-hunting-reporting
    ports:
      - "8006:8006"
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      kill_chain:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${COMPREHENSIVE_REPORTING_TIMEOUT:-3600}
      - PYTHONPATH=/app
      - TARGET=${TARGET}
      - STAGE_NAME=reporting
    volumes:
      - ./stages/reporting:/app/stages/reporting
      - ./stages/reporting/.env:/app/stages/reporting/.env
      - ./.env:/app/.env
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.5'
# =============================================================================
# LOGSTASH SERVICE
# =============================================================================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: bug_hunting_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    ports:
      - "9600:9600"
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

# =============================================================================
# BACKUP SERVICE
# =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: bug_hunting_backup
    restart: "no"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./db/backups:/backups
    networks:
      - bug-hunting-network
    depends_on:
      - db
    command: ["/bin/sh", "-c", "pg_dump -h db -U ${DB_USER:-postgres} -d ${DB_NAME:-bug_hunting_framework} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql && echo 'Backup completed successfully'"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true




# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local



# =============================================================================
# NETWORKS
# =============================================================================
networks:
  bug-hunting-network:
    driver: bridge
