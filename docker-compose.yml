# Bug Hunting Framework - Docker Compose Configuration
# Development Environment

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: bug-hunting-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres:/docker-entrypoint-initdb.d
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bug-hunting-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - METRICS_PORT=${METRICS_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # =============================================================================
  # JWT ROTATOR SERVICE
  # =============================================================================
  jwt_rotator:
    build:
      context: .
      dockerfile: scripts/Dockerfile.jwt-rotator
    volumes:
      - ./backend/.env:/app/backend.env
      - ./stages:/app/stages
    restart: always
    
  # =============================================================================
  # STAGE SERVICES
  # =============================================================================
  # Passive Recon Stage: Orchestrates all passive recon tools, saves raw/parsed outputs, and submits results to backend API using JWT auth.
  # - Raw outputs: /outputs/passive_recon/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/passive_recon/<TARGET>/parsed/<TOOL>_subdomains.json (or similar)
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN from .env
  # - Error handling: Each runner and API submission is wrapped in try/except; failures are logged and do not halt the overall process. A summary is printed at the end.
  passive_recon:
    build: ./stages/passive_recon
    container_name: bug-hunting-passive-recon
    env_files:
      - ./stages/passive_recon/.env
    ports:
      - "8001:8001"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./stages/passive_recon:/app
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bug-hunting-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next_cache:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  bug-hunting-network:
    driver: bridge
