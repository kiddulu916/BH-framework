# Bug Hunting Framework - Docker Compose Configuration
# Development Environment

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: bug-hunting-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres:/docker-entrypoint-initdb.d
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bug-hunting-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - METRICS_PORT=${METRICS_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # =============================================================================
  # JWT ROTATOR SERVICE
  # =============================================================================
  jwt_rotator:
    build:
      context: .
      dockerfile: scripts/Dockerfile.jwt-rotator
    container_name: bug-hunting-jwt-rotator
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./backend/.env:/app/backend.env
      - ./stages:/app/stages
      - ./backend/utils:/app/utils
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # STAGE SERVICES
  # =============================================================================
  # Passive Recon Stage: Orchestrates all passive recon tools, saves raw/parsed outputs, and submits results to backend API using JWT auth.
  # - Raw outputs: /outputs/passive_recon/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/passive_recon/<TARGET>/parsed/<TOOL>_subdomains.json (or similar)
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN from .env
  # - Error handling: Each runner and API submission is wrapped in try/except; failures are logged and do not halt the overall process. A summary is printed at the end.
  passive_recon:
    build:
      context: ./stages/passive_recon
      dockerfile: Dockerfile
    container_name: bug-hunting-passive-recon
    ports:
      - "8001:8001"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${PASSIVE_RECON_TIMEOUT}
      - PYTHONPATH=/app
    volumes:
      - ./stages/passive_recon:/app
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: ${STAGE_MAX_MEMORY_MB:-2048}M
          cpus: '0.8'

  # Active Recon Stage: Performs comprehensive active reconnaissance using multiple tools on subdomains discovered by passive recon.
  # - Queries passive recon results from backend API to get subdomains
  # - Runs port scanning (nmap, naabu), web server detection, directory enumeration (feroxbuster, katana)
  # - Performs JavaScript analysis (getJS, LinkFinder), parameter discovery (Arjun), technology detection (WebAnalyze)
  # - Captures screenshots (EyeWitness, EyeBaller) and performs DNS resolution (PureDNS)
  # - Raw outputs: /outputs/active_recon/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/active_recon/<TARGET>/parsed/<TOOL>_results.json
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN
  active_recon:
    build:
      context: ./stages/active_recon
      dockerfile: Dockerfile
    container_name: bug-hunting-active-recon
    ports:
      - "8002:8002"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      passive_recon:
        condition: service_started
    environment:
      - BACKEND_API_URL=${BACKEND_API_URL}
      - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
      - STAGE_TIMEOUT_SECONDS=${ACTIVE_RECON_TIMEOUT}
      - PYTHONPATH=/app
    volumes:
      - ./stages/active_recon:/app
      - ./outputs:/app/outputs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - bug-hunting-network
    deploy:
      resources:
        limits:
          memory: ${STAGE_MAX_MEMORY_MB:-2048}M
          cpus: '0.8'

  # Vulnerability Scanning Stage: Performs automated vulnerability scanning using nuclei and other tools.
  # - Queries active recon results from backend API to get live web servers and services
  # - Runs vulnerability scanning tools (nuclei) against discovered targets
  # - Raw outputs: /outputs/vuln_scan/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/vuln_scan/<TARGET>/parsed/<TOOL>_vulnerabilities.json
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN
  #vuln_scan:
  #  build:
  #    context: ./stages/vuln_scan
  #    dockerfile: Dockerfile
  #  container_name: bug-hunting-vuln-scan
  #  ports:
  #    - "8003:8003"
  #  restart: unless-stopped
  #  depends_on:
  #    backend:
  #      condition: service_healthy
  #    active_recon:
  #      condition: service_started
  #  environment:
  #    - BACKEND_API_URL=${BACKEND_API_URL}
  #    - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
  #    - STAGE_TIMEOUT_SECONDS=${VULN_SCAN_TIMEOUT}
  #    - PYTHONPATH=/app
  #  volumes:
  #    - ./stages/vuln_scan:/app
  #    - ./outputs:/app/outputs
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - bug-hunting-network
  #  deploy:
  #    resources:
  #      limits:
  #        memory: ${STAGE_MAX_MEMORY_MB:-2048}M
  #        cpus: '0.8'

  # Vulnerability Testing Stage: Performs manual verification and testing of discovered vulnerabilities.
  # - Queries vulnerability scan results from backend API to get potential vulnerabilities
  # - Runs verification tools (sqlmap, ffuf, etc.) to confirm and exploit vulnerabilities ethically
  # - Raw outputs: /outputs/vuln_test/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/vuln_test/<TARGET>/parsed/<TOOL>_verified.json
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN
  #vuln_test:
  #  build:
  #    context: ./stages/vuln_test
  #    dockerfile: Dockerfile
  #  container_name: bug-hunting-vuln-test
  #  ports:
  #    - "8004:8004"
  #  restart: unless-stopped
  #  depends_on:
  #    backend:
  #      condition: service_healthy
  #    vuln_scan:
  #      condition: service_started
  #  environment:
  #    - BACKEND_API_URL=${BACKEND_API_URL}
  #    - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
  #    - STAGE_TIMEOUT_SECONDS=${VULN_TEST_TIMEOUT}
  #    - PYTHONPATH=/app
  #  volumes:
  #    - ./stages/vuln_test:/app
  #    - ./outputs:/app/outputs
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - bug-hunting-network
  #  deploy:
  #    resources:
  #      limits:
  #        memory: ${STAGE_MAX_MEMORY_MB:-2048}M
  #        cpus: '0.8'
#
  # Kill Chain Analysis Stage: Analyzes attack paths and potential kill chains from all previous stages.
  # - Queries all previous stage results from backend API to get comprehensive target data
  # - Performs attack path analysis and kill chain identification
  # - Attempts to verify potential attack paths while maintaining ethical practices
  # - Raw outputs: /outputs/kill_chain/<TARGET>/<TOOL>.*
  # - Parsed outputs: /outputs/kill_chain/<TARGET>/parsed/<TOOL>_kill_chains.json
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN
  #kill_chain:
  #  build:
  #    context: ./stages/kill_chain
  #    dockerfile: Dockerfile
  #  container_name: bug-hunting-kill-chain
  #  ports:
  #    - "8005:8005"
  #  restart: unless-stopped
  #  depends_on:
  #    backend:
  #      condition: service_healthy
  #    vuln_test:
  #      condition: service_started
  #  environment:
  #    - BACKEND_API_URL=${BACKEND_API_URL}
  #    - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
  #    - STAGE_TIMEOUT_SECONDS=${KILL_CHAIN_TIMEOUT}
  #    - PYTHONPATH=/app
  #  volumes:
  #    - ./stages/kill_chain:/app
  #    - ./outputs:/app/outputs
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - bug-hunting-network
  #  deploy:
  #    resources:
  #      limits:
  #        memory: ${STAGE_MAX_MEMORY_MB:-2048}M
  #        cpus: '0.8'

  # Report Generation Stage: Generates comprehensive reports from all stage results.
  # - Queries all stage results from backend API to get complete target analysis
  # - Generates professional reports in various formats (PDF, HTML, Markdown)
  # - Raw outputs: /outputs/report/<TARGET>/<FORMAT>.*
  # - Parsed outputs: /outputs/report/<TARGET>/parsed/<FORMAT>_report.json
  # - Both raw and parsed outputs are submitted to the backend API using BACKEND_JWT_TOKEN
  #report:
  #  build:
  #    context: ./stages/report
  #    dockerfile: Dockerfile
  #  container_name: bug-hunting-report
  #  ports:
  #    - "8006:8006"
  #  restart: unless-stopped
  #  depends_on:
  #    backend:
  #      condition: service_healthy
  #    kill_chain:
  #      condition: service_started
  #  environment:
  #    - BACKEND_API_URL=${BACKEND_API_URL}
  #    - BACKEND_JWT_TOKEN=${BACKEND_JWT_TOKEN}
  #    - STAGE_TIMEOUT_SECONDS=${REPORT_GENERATION_TIMEOUT}
  #    - PYTHONPATH=/app
  #  volumes:
  #    - ./stages/report:/app
  #    - ./outputs:/app/outputs
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - bug-hunting-network
  #  deploy:
  #    resources:
  #      limits:
  #        memory: ${STAGE_MAX_MEMORY_MB:-2048}M
  #        cpus: '0.8'

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bug-hunting-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
    networks:
      - bug-hunting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next_cache:
    driver: local


# =============================================================================
# NETWORKS
# =============================================================================
networks:
  bug-hunting-network:
    driver: bridge
